{"filter":false,"title":"Template.py","tooltip":"/Haopeng/Template.py","ace":{"folds":[],"scrolltop":1126.799999999998,"scrollleft":0,"selection":{"start":{"row":24,"column":48},"end":{"row":24,"column":67},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":54,"state":"start","mode":"ace/mode/python"}},"hash":"7621343f5c75faaa2dd8769df1422b3d4c21086a","mime":"text/x-script.python","undoManager":{"mark":67,"position":67,"stack":[[{"start":{"row":0,"column":0},"end":{"row":115,"column":0},"action":"remove","lines":["'''","EXAMPLE AUTO QUOTER","","Do not edit this file directly. Instead, copy it somewhere else in your workspace.","These are simple bots that illustrate the Optibook API and some simple trading concepts. These bots will not make a profit.","","This is an example bot that quotes the instrument C2_GREEN_ENERGY_ETF.","Quoting an instrument means sending both bids and asks at the same time and making these publicly visible in the order book,","so that other participants can trade with you. The logic of this bot is very simple. It looks at the current order book and tries to ","improve the price by 0.10 cents if possible. If the best bid is 90 and the best ask is 91, it will try to send a bid=90.10 and ask=90.90.","'''","import logging","import time","from typing import List","from optibook import common_types as t","from optibook import ORDER_TYPE_IOC, ORDER_TYPE_LIMIT, SIDE_ASK, SIDE_BID","from optibook.exchange_responses import InsertOrderResponse","from optibook.synchronous_client import Exchange","import random","import json","","logging.getLogger('client').setLevel('ERROR')","logger = logging.getLogger(__name__)","","BASKET_INSTRUMENT_IDS = ['C1_FOSSIL_FUEL_ETF', 'C2_GREEN_ENERGY_ETF']","STOCK_INSTRUMENT_IDS = ['C1_GAS_INC', 'C1_OIL_CORP', 'C2_SOLAR_CO', 'C2_WIND_LTD']","ALL_IDS = ['C1_FOSSIL_FUEL_ETF', 'C2_GREEN_ENERGY_ETF', 'C1_GAS_INC', 'C1_OIL_CORP', 'C2_SOLAR_CO', 'C2_WIND_LTD']","","BASKET_ID1 = 'C1_FOSSIL_FUEL_ETF'","STOCK_IDS1= ['C1_GAS_INC', 'C1_OIL_CORP']","","BASKET_ID2 = 'C2_GREEN_ENERGY_ETF'","STOCK_IDS2 = ['C2_SOLAR_CO', 'C2_WIND_LTD']","","def print_report(e: Exchange):","    pnl = e.get_pnl()","    positions = e.get_positions()","    for ids in ALL_IDS:","        my_trades = e.poll_new_trades(ids)","        all_market_trades = e.poll_new_trade_ticks(ids)","        logger.info(f'I have done {len(my_trades)} trade(s) in {ids} since the last report. There have been {len(all_market_trades)} market trade(s) in total in {ids} since the last report.')","        logger.info(f'My PNL is: {pnl:.2f}')","        logger.info(f'My current positions are: {json.dumps(positions, indent=3)}')","","","def print_order_response(order_response: InsertOrderResponse):","    if order_response.success:","        logger.info(f\"Inserted order successfully, order_id='{order_response.order_id}'\")","    else:","        logger.info(f\"Unable to insert order with reason: '{order_response.success}'\")","","","def trade_cycle(e: Exchange):","    # because we use limit orders, always delete existing orders that remain from the previous iteration","    ","    for ids in ALL_IDS:","        e.delete_orders(ids)","        basket_book = e.get_last_price_book(ids)","        target = (basket_book.bids[0].price + basket_book.asks[0].price)/2","        if basket_book and basket_book.bids and basket_book.asks:","            logger.info(f'Order book for {ids}: best bid={basket_book.bids[0].price:.2f}, best ask={basket_book.asks[0].price:.2f}')","            # try to improve the best bid and best ask by 10 cents","            new_bid_price = target+1","            new_ask_price = target-1","            bid_response: InsertOrderResponse = e.insert_order(ids, price=new_bid_price, volume=1, side=SIDE_BID, order_type=ORDER_TYPE_LIMIT)","            print_order_response(bid_response)","            ask_response: InsertOrderResponse = e.insert_order(ids, price=new_ask_price, volume=1, side=SIDE_ASK, order_type=ORDER_TYPE_LIMIT)","            print_order_response(ask_response)","","        else:","            logger.info('No top bid/ask or no book at all for the basket instrument')","","    print_report(e)","def closeAllPosition(debug=False):","    '''","    Iterates and attempts to close all open positions","    ","    Parameters","    -----------","    debug : Bool","        If true, we print our current positions before and after attempting","        to close","    '''","    if(debug):","        print(\"Starting Positions: \")","        print(e.get_positions())","    for s, p in e.get_positions().items():","        if p > 0:","            e.insert_order(s, price=1, volume=p, side='ask', order_type='ioc')","        elif p < 0:","            e.insert_order(s, price=100000, volume=-p, side='bid', order_type='ioc')  ","    if(debug):","        print(\"End Positions: \")","        print(e.get_positions())","","","def main():","    e = Exchange()","    e.connect()","","    # you can also define host/user/pass yourself","    # when not defined, it is taken from ~/.optibook file if it exists","    # if that file does not exists, an error is thrown","    #exchange = Exchange(host='host-to-connect-to', info_port=7001, exec_port=8001, username='your-username', password='your-password')","    #exchange.connect()","    while true:","       ","       ","        if winbuy(e,id,):","            ","        ","        ","","if __name__ == '__main__':","    main()",""],"id":666},{"start":{"row":0,"column":0},"end":{"row":198,"column":0},"action":"insert","lines":["'''","EXAMPLE AUTO QUOTER","","Do not edit this file directly. Instead, copy it somewhere else in your workspace.","These are simple bots that illustrate the Optibook API and some simple trading concepts. These bots will not make a profit.","","This is an example bot that quotes the instrument C2_GREEN_ENERGY_ETF.","Quoting an instrument means sending both bids and asks at the same time and making these publicly visible in the order book,","so that other participants can trade with you. The logic of this bot is very simple. It looks at the current order book and tries to ","improve the price by 0.10 cents if possible. If the best bid is 90 and the best ask is 91, it will try to send a bid=90.10 and ask=90.90.","'''","import logging","import time","from typing import List","from optibook import common_types as t","from optibook import ORDER_TYPE_IOC, ORDER_TYPE_LIMIT, SIDE_ASK, SIDE_BID","from optibook.exchange_responses import InsertOrderResponse","from optibook.synchronous_client import Exchange","import random","import json","","logging.getLogger('client').setLevel('ERROR')","logger = logging.getLogger(__name__)","","BASKET_INSTRUMENT_IDS = ['C1_FOSSIL_FUEL_ETF', 'C2_GREEN_ENERGY_ETF']","STOCK_INSTRUMENT_IDS = ['C1_GAS_INC', 'C1_OIL_CORP', 'C2_SOLAR_CO', 'C2_WIND_LTD']","ALL_IDS = ['C1_FOSSIL_FUEL_ETF', 'C2_GREEN_ENERGY_ETF', 'C1_GAS_INC', 'C1_OIL_CORP', 'C2_SOLAR_CO', 'C2_WIND_LTD']","","","def closeAllPosition(e, debug=False):","    '''","    Iterates and attempts to close all open positions","    ","    Parameters","    -----------","    debug : Bool","        If true, we print our current positions before and after attempting","        to close","    '''","    if(debug):","        print(\"Starting Positions: \")","        print(e.get_positions())","    for s, p in e.get_positions().items():","        if p > 0:","            e.insert_order(s, price=1, volume=p, side='ask', order_type='ioc')","        elif p < 0:","            e.insert_order(s, price=100000, volume=-p, side='bid', order_type='ioc')  ","    if(debug):","        print(\"End Positions: \")","        print(e.get_positions())","","def print_order_response(order_response: InsertOrderResponse):","    if order_response.success:","        logger.info(f\"Inserted order successfully, order_id='{order_response.order_id}'\")","    else:","        logger.info(f\"Unable to insert order with reason: '{order_response.success}'\")","","def exists_gain(e, b_id, s1_id, s2_id):","    book_b = e.get_last_price_book(b_id)","    book_s1 = e.get_last_price_book(s1_id)","    book_s2 = e.get_last_price_book(s2_id)","    ","    if book_b and book_s1.bids and book_s2.bids and book_b.asks:","        # Comprar stock y vender basket ","        gain = (book_s1.bids[0].price + book_s2.bids[0].price) - (2*book_b.asks[0].price)","        if (gain > 0.1):","            # print([0, book_b.asks[0].price, book_b.asks[0].volume, book_s1.bids[0].price, book_s1.bids[0].volume, book_s2.bids[0].price, book_s2.bids[0].volume])","            return [0, book_b.asks[0].price, book_b.asks[0].volume, book_s1.bids[0].price, book_s1.bids[0].volume, book_s2.bids[0].price, book_s2.bids[0].volume, gain]","            ","    if book_b and book_s1.asks and book_s2.asks and book_b.bids:","        # Comprar basket y vender stock","        gain = (2*book_b.bids[0].price) - (book_s1.asks[0].price + book_s2.asks[0].price)","        if (gain > 0.1):","            # print([1, book_b.bids[0].price, book_b.bids[0].volume, book_s1.asks[0].price, book_s1.asks[0].volume, book_s2.asks[0].price, book_s2.asks[0].volume])","            return [1, book_b.bids[0].price, book_b.bids[0].volume, book_s1.asks[0].price, book_s1.asks[0].volume, book_s2.asks[0].price, book_s2.asks[0].volume, gain]","","    return [False]","    ","def trade_cycle(e: Exchange):","    pass","","","def main():","    exchange = Exchange()","    exchange.connect()","    ","    # closeAllPosition(exchange)","    print(exchange.get_positions_and_cash())","    ","    volume_basket = 4","    volume_stock = 2","    ","    while True:","        case = [\"C1_FOSSIL_FUEL_ETF\", \"C1_GAS_INC\", \"C1_OIL_CORP\"]","        result = exists_gain(exchange, case[0], case[1], case[2])","        if len(result)<=1: ","            case = [\"C2_GREEN_ENERGY_ETF\", 'C2_SOLAR_CO', 'C2_WIND_LTD']","            result = exists_gain(exchange, case[0], case[1], case[2])","            if len(result)<=1:","                # time.sleep(1)","                continue","            ","        print(\"REsult in main: \", result)","        ","        positions_and_cash = exchange.get_positions_and_cash()","        ","        if result[0]==0:","            # print(exchange.get_pnl())","            # # Keep position arount boundaries","            # Worst case: About to exceed limits of negative basket -> Need to buy immediately","            if positions_and_cash[case[0]][\"volume\"] - volume_basket <= -450:","                response: InsertOrderResponse = exchange.insert_order(case[0], price=result[1], volume=volume_basket, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            # Worst case: About to exceed limits of positive stock1 -> Need to sell immediately","            if positions_and_cash[case[1]][\"volume\"] + volume_stock >= 450:","                response: InsertOrderResponse = exchange.insert_order(case[1], price=result[3], volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            # Worst case: About to exceed limits of positive stock2 -> Need to sell immediately","            if positions_and_cash[case[2]][\"volume\"] + volume_stock >= 450:","                response: InsertOrderResponse = exchange.insert_order(case[2], price=result[5], volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","                ","            ''' Keep position around 0","            if positions_and_cash[case[0]][\"volume\"] < volume_basket:","                response: InsertOrderResponse = exchange.insert_order(case[0], price=result[1], volume=volume_basket, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            if positions_and_cash[case[1]][\"volume\"] >= volume_stock:","                response: InsertOrderResponse = exchange.insert_order(case[1], price=result[3], volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            if positions_and_cash[case[2]][\"volume\"] >= volume_stock:","                response: InsertOrderResponse = exchange.insert_order(case[2], price=result[5], volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            '''","            ","            # Start buying stock and selling basket","            exchange.insert_order(case[0], price=result[1], volume=volume_basket, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","            exchange.insert_order(case[1], price=result[3], volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","            exchange.insert_order(case[2], price=result[5], volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","            ","            print(exchange.get_positions_and_cash())","            ","            # print(exchange.get_pnl())","            ","        if result[0]==1:","            ","            # print(exchange.get_pnl())","            # # Keep position arount boundaries","            # Worst case: About to exceed limits of positive basket -> Need to sell immediately","            if positions_and_cash[case[0]][\"volume\"] + volume_basket >= 450:","                response: InsertOrderResponse = exchange.insert_order(case[0], price=result[1], volume=volume_basket, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            # Worst case: About to exceed limits of negative stock1 -> Need to buy immediately","            if positions_and_cash[case[1]][\"volume\"] - volume_stock <= -450:","                response: InsertOrderResponse = exchange.insert_order(case[1], price=result[3], volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            # Worst case: About to exceed limits of negative stock2 -> Need to buy immediately","            if positions_and_cash[case[2]][\"volume\"] - volume_stock <= -450:","                response: InsertOrderResponse = exchange.insert_order(case[2], price=result[5], volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            ","            ","            '''","            if positions_and_cash[case[0]][\"volume\"] >= volume_basket:","                response: InsertOrderResponse = exchange.insert_order(case[0], price=result[1], volume=volume_basket, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            if positions_and_cash[case[1]][\"volume\"] < volume_stock:","                response: InsertOrderResponse = exchange.insert_order(case[1], price=result[3], volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            if positions_and_cash[case[2]][\"volume\"] < volume_stock:","                response: InsertOrderResponse = exchange.insert_order(case[2], price=result[5], volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            '''","            ","            # Start buying basket and selling stock","            exchange.insert_order(case[0], price=result[1], volume=volume_basket, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","            exchange.insert_order(case[1], price=result[3], volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","            exchange.insert_order(case[2], price=result[5], volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","            ","            print(exchange.get_positions_and_cash())","            ","            ''' Keep position around 0","            for pos in positions_and_cash:","                if positions_and_cash[pos][\"volume\"] > 280:","                    response: InsertOrderResponse = exchange.insert_order(pos, price=50, volume=15, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","                    print_order_response(response)","                if positions_and_cash[pos][\"volume\"]< -280:","                    response: InsertOrderResponse = exchange.insert_order(pos, price=210, volume=15, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","                    print_order_response(response)","            '''","        # time.sleep(1)","        ","        ","    ","    ","    ","","if __name__ == '__main__':","    main()",""]}],[{"start":{"row":64,"column":89},"end":{"row":65,"column":0},"action":"insert","lines":["",""],"id":667},{"start":{"row":65,"column":0},"end":{"row":65,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":65,"column":8},"end":{"row":66,"column":70},"action":"insert","lines":[" minimo_stocks_unit = min(book_s1.asks[0].volume,book_s2.asks[0].volume)","        n = min((book_b.bids[0].volume // 2 * 2)/2,minimo_stocks_unit)"],"id":668}],[{"start":{"row":65,"column":8},"end":{"row":65,"column":9},"action":"remove","lines":[" "],"id":669}],[{"start":{"row":65,"column":0},"end":{"row":66,"column":70},"action":"remove","lines":["        minimo_stocks_unit = min(book_s1.asks[0].volume,book_s2.asks[0].volume)","        n = min((book_b.bids[0].volume // 2 * 2)/2,minimo_stocks_unit)"],"id":670}],[{"start":{"row":63,"column":40},"end":{"row":64,"column":0},"action":"insert","lines":["",""],"id":671},{"start":{"row":64,"column":0},"end":{"row":64,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":64,"column":8},"end":{"row":65,"column":70},"action":"insert","lines":["        minimo_stocks_unit = min(book_s1.asks[0].volume,book_s2.asks[0].volume)","        n = min((book_b.bids[0].volume // 2 * 2)/2,minimo_stocks_unit)"],"id":672}],[{"start":{"row":64,"column":12},"end":{"row":64,"column":16},"action":"remove","lines":["    "],"id":673},{"start":{"row":64,"column":8},"end":{"row":64,"column":12},"action":"remove","lines":["    "]},{"start":{"row":64,"column":4},"end":{"row":64,"column":8},"action":"remove","lines":["    "]}],[{"start":{"row":64,"column":4},"end":{"row":64,"column":8},"action":"insert","lines":["    "],"id":674}],[{"start":{"row":66,"column":16},"end":{"row":66,"column":17},"action":"insert","lines":["n"],"id":675}],[{"start":{"row":66,"column":17},"end":{"row":66,"column":18},"action":"insert","lines":[" "],"id":676}],[{"start":{"row":66,"column":17},"end":{"row":66,"column":18},"action":"remove","lines":[" "],"id":677}],[{"start":{"row":66,"column":17},"end":{"row":66,"column":18},"action":"insert","lines":["*"],"id":678}],[{"start":{"row":66,"column":18},"end":{"row":66,"column":19},"action":"insert","lines":[" "],"id":679}],[{"start":{"row":66,"column":18},"end":{"row":66,"column":19},"action":"remove","lines":[" "],"id":680}],[{"start":{"row":66,"column":42},"end":{"row":66,"column":43},"action":"insert","lines":["n"],"id":681},{"start":{"row":66,"column":43},"end":{"row":66,"column":44},"action":"insert","lines":["*"]}],[{"start":{"row":66,"column":44},"end":{"row":66,"column":45},"action":"insert","lines":[" "],"id":682}],[{"start":{"row":66,"column":44},"end":{"row":66,"column":45},"action":"remove","lines":[" "],"id":683}],[{"start":{"row":66,"column":71},"end":{"row":66,"column":72},"action":"insert","lines":["*"],"id":684},{"start":{"row":66,"column":72},"end":{"row":66,"column":73},"action":"insert","lines":["m"]}],[{"start":{"row":66,"column":72},"end":{"row":66,"column":73},"action":"remove","lines":["m"],"id":685}],[{"start":{"row":66,"column":72},"end":{"row":66,"column":73},"action":"insert","lines":["n"],"id":686}],[{"start":{"row":73,"column":39},"end":{"row":74,"column":0},"action":"insert","lines":["",""],"id":687},{"start":{"row":74,"column":0},"end":{"row":74,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":74,"column":8},"end":{"row":76,"column":51},"action":"insert","lines":["minimo_stocks_unit = min(book_s1.asks[0].volume,book_s2.asks[0].volume)","        minimo_b_unit = min(2*minimo_stocks_unit,book_b.bids[0].volume // 2 * 2)","        n = min(minimo_b_unit/2,minimo_stocks_unit)"],"id":688}],[{"start":{"row":77,"column":18},"end":{"row":77,"column":19},"action":"insert","lines":["m"],"id":689},{"start":{"row":77,"column":19},"end":{"row":77,"column":20},"action":"insert","lines":["i"]},{"start":{"row":77,"column":20},"end":{"row":77,"column":21},"action":"insert","lines":["u"]}],[{"start":{"row":77,"column":20},"end":{"row":77,"column":21},"action":"remove","lines":["u"],"id":690}],[{"start":{"row":77,"column":20},"end":{"row":77,"column":21},"action":"insert","lines":["n"],"id":691},{"start":{"row":77,"column":21},"end":{"row":77,"column":22},"action":"insert","lines":["i"]},{"start":{"row":77,"column":22},"end":{"row":77,"column":23},"action":"insert","lines":["m"]}],[{"start":{"row":77,"column":18},"end":{"row":77,"column":23},"action":"remove","lines":["minim"],"id":692},{"start":{"row":77,"column":18},"end":{"row":77,"column":31},"action":"insert","lines":["minimo_b_unit"]}],[{"start":{"row":77,"column":31},"end":{"row":77,"column":32},"action":"insert","lines":["*"],"id":693}],[{"start":{"row":77,"column":32},"end":{"row":77,"column":33},"action":"insert","lines":[" "],"id":694}],[{"start":{"row":77,"column":32},"end":{"row":77,"column":33},"action":"remove","lines":[" "],"id":695}],[{"start":{"row":77,"column":57},"end":{"row":77,"column":58},"action":"insert","lines":["n"],"id":696},{"start":{"row":77,"column":58},"end":{"row":77,"column":59},"action":"insert","lines":["*"]}],[{"start":{"row":77,"column":83},"end":{"row":77,"column":84},"action":"insert","lines":["n"],"id":697},{"start":{"row":77,"column":84},"end":{"row":77,"column":85},"action":"insert","lines":["*"]}],[{"start":{"row":77,"column":85},"end":{"row":77,"column":86},"action":"insert","lines":[" "],"id":698}],[{"start":{"row":77,"column":85},"end":{"row":77,"column":86},"action":"remove","lines":[" "],"id":699}],[{"start":{"row":70,"column":45},"end":{"row":70,"column":66},"action":"remove","lines":["book_b.asks[0].volume"],"id":700}],[{"start":{"row":70,"column":45},"end":{"row":70,"column":46},"action":"insert","lines":["2"],"id":701},{"start":{"row":70,"column":46},"end":{"row":70,"column":47},"action":"insert","lines":["n"]}],[{"start":{"row":70,"column":72},"end":{"row":70,"column":95},"action":"remove","lines":["book_s1.bids[0].volume,"],"id":702}],[{"start":{"row":70,"column":72},"end":{"row":70,"column":73},"action":"insert","lines":["n"],"id":703},{"start":{"row":70,"column":73},"end":{"row":70,"column":74},"action":"insert","lines":[","]}],[{"start":{"row":70,"column":98},"end":{"row":70,"column":120},"action":"remove","lines":["book_s2.bids[0].volume"],"id":704},{"start":{"row":70,"column":98},"end":{"row":70,"column":99},"action":"insert","lines":["n"]}],[{"start":{"row":80,"column":45},"end":{"row":80,"column":66},"action":"remove","lines":["book_b.bids[0].volume"],"id":705}],[{"start":{"row":80,"column":45},"end":{"row":80,"column":46},"action":"insert","lines":["2"],"id":706},{"start":{"row":80,"column":46},"end":{"row":80,"column":47},"action":"insert","lines":["n"]}],[{"start":{"row":80,"column":72},"end":{"row":80,"column":94},"action":"remove","lines":["book_s1.asks[0].volume"],"id":707},{"start":{"row":80,"column":72},"end":{"row":80,"column":73},"action":"insert","lines":["n"]}],[{"start":{"row":80,"column":98},"end":{"row":80,"column":120},"action":"remove","lines":["book_s2.asks[0].volume"],"id":708},{"start":{"row":80,"column":98},"end":{"row":80,"column":99},"action":"insert","lines":["n"]}],[{"start":{"row":95,"column":0},"end":{"row":96,"column":20},"action":"remove","lines":["    volume_basket = 4","    volume_stock = 2"],"id":709}],[{"start":{"row":106,"column":8},"end":{"row":106,"column":12},"action":"remove","lines":["    "],"id":710}],[{"start":{"row":106,"column":8},"end":{"row":107,"column":20},"action":"insert","lines":["    volume_basket = 4","    volume_stock = 2"],"id":711}],[{"start":{"row":106,"column":8},"end":{"row":106,"column":12},"action":"remove","lines":["    "],"id":712}],[{"start":{"row":107,"column":4},"end":{"row":107,"column":8},"action":"insert","lines":["    "],"id":713}],[{"start":{"row":106,"column":24},"end":{"row":106,"column":25},"action":"remove","lines":["4"],"id":714}],[{"start":{"row":106,"column":24},"end":{"row":106,"column":25},"action":"insert","lines":["r"],"id":715},{"start":{"row":106,"column":25},"end":{"row":106,"column":26},"action":"insert","lines":["e"]},{"start":{"row":106,"column":26},"end":{"row":106,"column":27},"action":"insert","lines":["s"]},{"start":{"row":106,"column":27},"end":{"row":106,"column":28},"action":"insert","lines":["u"]},{"start":{"row":106,"column":28},"end":{"row":106,"column":29},"action":"insert","lines":["l"]},{"start":{"row":106,"column":29},"end":{"row":106,"column":30},"action":"insert","lines":["t"]}],[{"start":{"row":106,"column":30},"end":{"row":106,"column":31},"action":"insert","lines":[" "],"id":716}],[{"start":{"row":106,"column":30},"end":{"row":106,"column":31},"action":"remove","lines":[" "],"id":717}],[{"start":{"row":106,"column":30},"end":{"row":106,"column":32},"action":"insert","lines":["[]"],"id":718}],[{"start":{"row":106,"column":31},"end":{"row":106,"column":32},"action":"insert","lines":["2"],"id":719}],[{"start":{"row":106,"column":32},"end":{"row":106,"column":33},"action":"insert","lines":[" "],"id":720}],[{"start":{"row":106,"column":32},"end":{"row":106,"column":33},"action":"remove","lines":[" "],"id":721}],[{"start":{"row":107,"column":23},"end":{"row":107,"column":24},"action":"remove","lines":["2"],"id":722}],[{"start":{"row":107,"column":23},"end":{"row":107,"column":24},"action":"insert","lines":["r"],"id":723},{"start":{"row":107,"column":24},"end":{"row":107,"column":25},"action":"insert","lines":["e"]},{"start":{"row":107,"column":25},"end":{"row":107,"column":26},"action":"insert","lines":["s"]},{"start":{"row":107,"column":26},"end":{"row":107,"column":27},"action":"insert","lines":["u"]},{"start":{"row":107,"column":27},"end":{"row":107,"column":28},"action":"insert","lines":["l"]},{"start":{"row":107,"column":28},"end":{"row":107,"column":29},"action":"insert","lines":["t"]}],[{"start":{"row":107,"column":29},"end":{"row":107,"column":30},"action":"insert","lines":[" "],"id":724}],[{"start":{"row":107,"column":29},"end":{"row":107,"column":30},"action":"remove","lines":[" "],"id":725}],[{"start":{"row":107,"column":29},"end":{"row":107,"column":31},"action":"insert","lines":["[]"],"id":726}],[{"start":{"row":107,"column":30},"end":{"row":107,"column":31},"action":"insert","lines":["4"],"id":727}],[{"start":{"row":70,"column":46},"end":{"row":70,"column":47},"action":"insert","lines":["*"],"id":728}],[{"start":{"row":80,"column":46},"end":{"row":80,"column":47},"action":"insert","lines":["*"],"id":729}],[{"start":{"row":88,"column":0},"end":{"row":204,"column":0},"action":"remove","lines":["def main():","    exchange = Exchange()","    exchange.connect()","    ","    # closeAllPosition(exchange)","    print(exchange.get_positions_and_cash())","    ","","    ","    while True:","        case = [\"C1_FOSSIL_FUEL_ETF\", \"C1_GAS_INC\", \"C1_OIL_CORP\"]","        result = exists_gain(exchange, case[0], case[1], case[2])","        if len(result)<=1: ","            case = [\"C2_GREEN_ENERGY_ETF\", 'C2_SOLAR_CO', 'C2_WIND_LTD']","            result = exists_gain(exchange, case[0], case[1], case[2])","            if len(result)<=1:","                # time.sleep(1)","                continue","        volume_basket = result[2]","        volume_stock = result[4]","        print(\"REsult in main: \", result)","        ","        positions_and_cash = exchange.get_positions_and_cash()","        ","        if result[0]==0:","            # print(exchange.get_pnl())","            # # Keep position arount boundaries","            # Worst case: About to exceed limits of negative basket -> Need to buy immediately","            if positions_and_cash[case[0]][\"volume\"] - volume_basket <= -450:","                response: InsertOrderResponse = exchange.insert_order(case[0], price=result[1], volume=volume_basket, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            # Worst case: About to exceed limits of positive stock1 -> Need to sell immediately","            if positions_and_cash[case[1]][\"volume\"] + volume_stock >= 450:","                response: InsertOrderResponse = exchange.insert_order(case[1], price=result[3], volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            # Worst case: About to exceed limits of positive stock2 -> Need to sell immediately","            if positions_and_cash[case[2]][\"volume\"] + volume_stock >= 450:","                response: InsertOrderResponse = exchange.insert_order(case[2], price=result[5], volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","                ","            ''' Keep position around 0","            if positions_and_cash[case[0]][\"volume\"] < volume_basket:","                response: InsertOrderResponse = exchange.insert_order(case[0], price=result[1], volume=volume_basket, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            if positions_and_cash[case[1]][\"volume\"] >= volume_stock:","                response: InsertOrderResponse = exchange.insert_order(case[1], price=result[3], volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            if positions_and_cash[case[2]][\"volume\"] >= volume_stock:","                response: InsertOrderResponse = exchange.insert_order(case[2], price=result[5], volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            '''","            ","            # Start buying stock and selling basket","            exchange.insert_order(case[0], price=result[1], volume=volume_basket, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","            exchange.insert_order(case[1], price=result[3], volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","            exchange.insert_order(case[2], price=result[5], volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","            ","            print(exchange.get_positions_and_cash())","            ","            # print(exchange.get_pnl())","            ","        if result[0]==1:","            ","            # print(exchange.get_pnl())","            # # Keep position arount boundaries","            # Worst case: About to exceed limits of positive basket -> Need to sell immediately","            if positions_and_cash[case[0]][\"volume\"] + volume_basket >= 450:","                response: InsertOrderResponse = exchange.insert_order(case[0], price=result[1], volume=volume_basket, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            # Worst case: About to exceed limits of negative stock1 -> Need to buy immediately","            if positions_and_cash[case[1]][\"volume\"] - volume_stock <= -450:","                response: InsertOrderResponse = exchange.insert_order(case[1], price=result[3], volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            # Worst case: About to exceed limits of negative stock2 -> Need to buy immediately","            if positions_and_cash[case[2]][\"volume\"] - volume_stock <= -450:","                response: InsertOrderResponse = exchange.insert_order(case[2], price=result[5], volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            ","            ","            '''","            if positions_and_cash[case[0]][\"volume\"] >= volume_basket:","                response: InsertOrderResponse = exchange.insert_order(case[0], price=result[1], volume=volume_basket, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            if positions_and_cash[case[1]][\"volume\"] < volume_stock:","                response: InsertOrderResponse = exchange.insert_order(case[1], price=result[3], volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            if positions_and_cash[case[2]][\"volume\"] < volume_stock:","                response: InsertOrderResponse = exchange.insert_order(case[2], price=result[5], volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            '''","            ","            # Start buying basket and selling stock","            exchange.insert_order(case[0], price=result[1], volume=volume_basket, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","            exchange.insert_order(case[1], price=result[3], volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","            exchange.insert_order(case[2], price=result[5], volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","            ","            print(exchange.get_positions_and_cash())","            ","            ''' Keep position around 0","            for pos in positions_and_cash:","                if positions_and_cash[pos][\"volume\"] > 280:","                    response: InsertOrderResponse = exchange.insert_order(pos, price=50, volume=15, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","                    print_order_response(response)","                if positions_and_cash[pos][\"volume\"]< -280:","                    response: InsertOrderResponse = exchange.insert_order(pos, price=210, volume=15, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","                    print_order_response(response)","            '''","        # time.sleep(1)","        ","        ","    ","    ","    ","","if __name__ == '__main__':","    main()",""],"id":730},{"start":{"row":88,"column":0},"end":{"row":192,"column":23},"action":"insert","lines":["def main():","    exchange = Exchange()","    exchange.connect()","    ","    # closeAllPosition(exchange)","    print(exchange.get_positions_and_cash())","    ","    volume_basket = 4","    volume_stock = 2","    ","    while True:","        case = [\"C1_FOSSIL_FUEL_ETF\", \"C1_GAS_INC\", \"C1_OIL_CORP\"]","        result = exists_gain(exchange, case[0], case[1], case[2])","        if len(result)<=1: ","            case = [\"C2_GREEN_ENERGY_ETF\", 'C2_SOLAR_CO', 'C2_WIND_LTD']","            result = exists_gain(exchange, case[0], case[1], case[2])","            if len(result)<=1:","                # time.sleep(1)","                continue","            ","        # print(\"REsult in main: \", result)","        ","        positions_and_cash = exchange.get_positions_and_cash()","        ","        if result[0]==0:","            # print(exchange.get_pnl())","            ","            # Start buying stock and selling basket","            response: InsertOrderResponse = exchange.insert_order(case[0], price=result[1], volume=volume_basket, side=SIDE_ASK, order_type=ORDER_TYPE_LIMIT)","            print_order_response(response)","            response: InsertOrderResponse = exchange.insert_order(case[1], price=result[3], volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_LIMIT)","            print_order_response(response)","            response: InsertOrderResponse = exchange.insert_order(case[2], price=result[5], volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_LIMIT)","            ","            print(\"CASE 1\", exchange.get_positions_and_cash())","            ","            # # Keep position arount boundaries","            # Worst case: About to exceed limits of negative basket -> Need to buy immediately","            if positions_and_cash[case[0]][\"volume\"] - volume_basket <= -450:","                response: InsertOrderResponse = exchange.insert_order(case[0], price=result[1], volume=volume_basket, side=SIDE_BID, order_type=ORDER_TYPE_LIMIT)","                print_order_response(response)","            # Worst case: About to exceed limits of positive stock1 -> Need to sell immediately","            if positions_and_cash[case[1]][\"volume\"] + volume_stock >= 450:","                response: InsertOrderResponse = exchange.insert_order(case[1], price=result[3], volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_LIMIT)","                print_order_response(response)","            # Worst case: About to exceed limits of positive stock2 -> Need to sell immediately","            if positions_and_cash[case[2]][\"volume\"] + volume_stock >= 450:","                response: InsertOrderResponse = exchange.insert_order(case[2], price=result[5], volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_LIMIT)","                print_order_response(response)","                ","            ''' Keep position around 0","            if positions_and_cash[case[0]][\"volume\"] < volume_basket:","                response: InsertOrderResponse = exchange.insert_order(case[0], price=result[1], volume=volume_basket, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            if positions_and_cash[case[1]][\"volume\"] >= volume_stock:","                response: InsertOrderResponse = exchange.insert_order(case[1], price=result[3], volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            if positions_and_cash[case[2]][\"volume\"] >= volume_stock:","                response: InsertOrderResponse = exchange.insert_order(case[2], price=result[5], volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            '''","            ","            ","            # print(exchange.get_pnl())","            ","        if result[0]==1:","            # print(exchange.get_pnl())","            ","            # Start buying basket and selling stock","            response: InsertOrderResponse = exchange.insert_order(case[0], price=result[1], volume=volume_basket, side=SIDE_BID, order_type=ORDER_TYPE_LIMIT)","            print_order_response(response)","            response: InsertOrderResponse = exchange.insert_order(case[1], price=result[3], volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_LIMIT)","            print_order_response(response)","            response: InsertOrderResponse = exchange.insert_order(case[2], price=result[5], volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_LIMIT)","            ","            print(\"CASE 2\", exchange.get_positions_and_cash())","            ","            # # Keep position arount boundaries","            # Worst case: About to exceed limits of positive basket -> Need to sell immediately","            if positions_and_cash[case[0]][\"volume\"] + volume_basket >= 450:","                response: InsertOrderResponse = exchange.insert_order(case[0], price=result[1], volume=volume_basket, side=SIDE_ASK, order_type=ORDER_TYPE_LIMIT)","                print_order_response(response)","            # Worst case: About to exceed limits of negative stock1 -> Need to buy immediately","            if positions_and_cash[case[1]][\"volume\"] - volume_stock <= -450:","                response: InsertOrderResponse = exchange.insert_order(case[1], price=result[3], volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_LIMIT)","                print_order_response(response)","            # Worst case: About to exceed limits of negative stock2 -> Need to buy immediately","            if positions_and_cash[case[2]][\"volume\"] - volume_stock <= -450:","                response: InsertOrderResponse = exchange.insert_order(case[2], price=result[5], volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_LIMIT)","                print_order_response(response)","            ","            ","            '''","            if positions_and_cash[case[0]][\"volume\"] >= volume_basket:","                response: InsertOrderResponse = exchange.insert_order(case[0], price=result[1], volume=volume_basket, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            if positions_and_cash[case[1]][\"volume\"] < volume_stock:","                response: InsertOrderResponse = exchange.insert_order(case[1], price=result[3], volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            if positions_and_cash[case[2]][\"volume\"] < volume_stock:","                response: InsertOrderResponse = exchange.insert_order(case[2], price=result[5], volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            '''","","        # time.sleep(1)"]}],[{"start":{"row":192,"column":23},"end":{"row":193,"column":0},"action":"insert","lines":["",""],"id":731},{"start":{"row":193,"column":0},"end":{"row":193,"column":8},"action":"insert","lines":["        "]},{"start":{"row":193,"column":8},"end":{"row":194,"column":0},"action":"insert","lines":["",""]},{"start":{"row":194,"column":0},"end":{"row":194,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":194,"column":4},"end":{"row":194,"column":8},"action":"remove","lines":["    "],"id":732},{"start":{"row":194,"column":0},"end":{"row":194,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":194,"column":0},"end":{"row":195,"column":10},"action":"insert","lines":["if __name__ == '__main__':","    main()"],"id":733}]]},"timestamp":1684013003350}