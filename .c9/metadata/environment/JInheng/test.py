{"filter":false,"title":"test.py","tooltip":"/JInheng/test.py","ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":0,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"mime":"text/x-script.python","timestamp":1684011942975,"hash":"252bd1d2409d3c0a55751921d00dc2dda37658c7","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":141,"column":41},"end":{"row":142,"column":0},"action":"insert","lines":["",""],"id":910},{"start":{"row":142,"column":0},"end":{"row":142,"column":16},"action":"insert","lines":["                "]}],[{"start":{"row":140,"column":54},"end":{"row":140,"column":55},"action":"insert","lines":[" "],"id":911},{"start":{"row":140,"column":55},"end":{"row":140,"column":56},"action":"insert","lines":["+"]}],[{"start":{"row":140,"column":56},"end":{"row":140,"column":57},"action":"insert","lines":[" "],"id":912}],[{"start":{"row":140,"column":57},"end":{"row":140,"column":59},"action":"insert","lines":["()"],"id":913}],[{"start":{"row":140,"column":57},"end":{"row":140,"column":58},"action":"insert","lines":["f"],"id":914},{"start":{"row":140,"column":58},"end":{"row":140,"column":59},"action":"insert","lines":["l"]},{"start":{"row":140,"column":59},"end":{"row":140,"column":60},"action":"insert","lines":["o"]},{"start":{"row":140,"column":60},"end":{"row":140,"column":61},"action":"insert","lines":["a"]},{"start":{"row":140,"column":61},"end":{"row":140,"column":62},"action":"insert","lines":["t"]}],[{"start":{"row":140,"column":63},"end":{"row":140,"column":101},"action":"insert","lines":["basket_book_bucket.asks[0].price - 0.1"],"id":915}],[{"start":{"row":140,"column":101},"end":{"row":140,"column":102},"action":"insert","lines":[" "],"id":916},{"start":{"row":140,"column":102},"end":{"row":140,"column":103},"action":"insert","lines":["-"]}],[{"start":{"row":140,"column":103},"end":{"row":140,"column":104},"action":"insert","lines":[" "],"id":917}],[{"start":{"row":140,"column":104},"end":{"row":140,"column":126},"action":"insert","lines":["float(Total/iteration)"],"id":918}],[{"start":{"row":140,"column":32},"end":{"row":140,"column":33},"action":"insert","lines":["2"],"id":919},{"start":{"row":140,"column":33},"end":{"row":140,"column":34},"action":"insert","lines":["*"]}],[{"start":{"row":140,"column":103},"end":{"row":140,"column":128},"action":"remove","lines":[" - float(Total/iteration)"],"id":920}],[{"start":{"row":163,"column":10},"end":{"row":163,"column":11},"action":"insert","lines":["("],"id":921}],[{"start":{"row":163,"column":15},"end":{"row":163,"column":16},"action":"insert","lines":[")"],"id":922}],[{"start":{"row":163,"column":10},"end":{"row":163,"column":11},"action":"remove","lines":["("],"id":923}],[{"start":{"row":163,"column":14},"end":{"row":163,"column":15},"action":"remove","lines":[")"],"id":924}],[{"start":{"row":163,"column":10},"end":{"row":163,"column":11},"action":"remove","lines":["!"],"id":925}],[{"start":{"row":163,"column":10},"end":{"row":163,"column":11},"action":"insert","lines":["n"],"id":926},{"start":{"row":163,"column":11},"end":{"row":163,"column":12},"action":"insert","lines":["o"]},{"start":{"row":163,"column":12},"end":{"row":163,"column":13},"action":"insert","lines":["t"]}],[{"start":{"row":163,"column":13},"end":{"row":163,"column":14},"action":"insert","lines":[" "],"id":927}],[{"start":{"row":162,"column":14},"end":{"row":162,"column":15},"action":"remove","lines":["e"],"id":928},{"start":{"row":162,"column":13},"end":{"row":162,"column":14},"action":"remove","lines":["s"]},{"start":{"row":162,"column":12},"end":{"row":162,"column":13},"action":"remove","lines":["l"]},{"start":{"row":162,"column":11},"end":{"row":162,"column":12},"action":"remove","lines":["a"]},{"start":{"row":162,"column":10},"end":{"row":162,"column":11},"action":"remove","lines":["f"]}],[{"start":{"row":162,"column":10},"end":{"row":162,"column":11},"action":"insert","lines":["F"],"id":929},{"start":{"row":162,"column":11},"end":{"row":162,"column":12},"action":"insert","lines":["a"]},{"start":{"row":162,"column":12},"end":{"row":162,"column":13},"action":"insert","lines":["l"]},{"start":{"row":162,"column":13},"end":{"row":162,"column":14},"action":"insert","lines":["s"]},{"start":{"row":162,"column":14},"end":{"row":162,"column":15},"action":"insert","lines":["e"]}],[{"start":{"row":167,"column":18},"end":{"row":167,"column":19},"action":"remove","lines":["t"],"id":930}],[{"start":{"row":167,"column":18},"end":{"row":167,"column":19},"action":"insert","lines":["T"],"id":931}],[{"start":{"row":157,"column":4},"end":{"row":163,"column":35},"action":"insert","lines":["    basket_book_bucket = e.get_last_price_book(BASKET_INSTRUMENT_ID)","    basket_book_stock1 = e.get_last_price_book(STOCK_INSTRUMENT_IDS[0])","    basket_book_stock2 = e.get_last_price_book(STOCK_INSTRUMENT_IDS[1])","    ","    logger.info(basket_book_bucket)","    logger.info(basket_book_stock1)","    logger.info(basket_book_stock2)"],"id":932}],[{"start":{"row":157,"column":4},"end":{"row":157,"column":8},"action":"remove","lines":["    "],"id":933}],[{"start":{"row":158,"column":0},"end":{"row":159,"column":71},"action":"remove","lines":["    basket_book_stock1 = e.get_last_price_book(STOCK_INSTRUMENT_IDS[0])","    basket_book_stock2 = e.get_last_price_book(STOCK_INSTRUMENT_IDS[1])"],"id":934},{"start":{"row":157,"column":68},"end":{"row":158,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":135,"column":41},"end":{"row":136,"column":0},"action":"insert","lines":["",""],"id":935},{"start":{"row":136,"column":0},"end":{"row":136,"column":16},"action":"insert","lines":["                "]}],[{"start":{"row":136,"column":16},"end":{"row":136,"column":80},"action":"insert","lines":["basket_book_bucket = e.get_last_price_book(BASKET_INSTRUMENT_ID)"],"id":936}],[{"start":{"row":142,"column":41},"end":{"row":143,"column":0},"action":"insert","lines":["",""],"id":937},{"start":{"row":143,"column":0},"end":{"row":143,"column":16},"action":"insert","lines":["                "]}],[{"start":{"row":143,"column":16},"end":{"row":143,"column":80},"action":"insert","lines":["basket_book_bucket = e.get_last_price_book(BASKET_INSTRUMENT_ID)"],"id":938}],[{"start":{"row":136,"column":16},"end":{"row":136,"column":80},"action":"remove","lines":["basket_book_bucket = e.get_last_price_book(BASKET_INSTRUMENT_ID)"],"id":939}],[{"start":{"row":130,"column":76},"end":{"row":131,"column":0},"action":"insert","lines":["",""],"id":940},{"start":{"row":131,"column":0},"end":{"row":131,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":131,"column":12},"end":{"row":131,"column":76},"action":"insert","lines":["basket_book_bucket = e.get_last_price_book(BASKET_INSTRUMENT_ID)"],"id":941}],[{"start":{"row":144,"column":16},"end":{"row":144,"column":80},"action":"remove","lines":["basket_book_bucket = e.get_last_price_book(BASKET_INSTRUMENT_ID)"],"id":942}],[{"start":{"row":138,"column":76},"end":{"row":139,"column":0},"action":"insert","lines":["",""],"id":943},{"start":{"row":139,"column":0},"end":{"row":139,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":139,"column":12},"end":{"row":139,"column":76},"action":"insert","lines":["basket_book_bucket = e.get_last_price_book(BASKET_INSTRUMENT_ID)"],"id":944}],[{"start":{"row":164,"column":0},"end":{"row":165,"column":35},"action":"remove","lines":["    logger.info(basket_book_stock1)","    logger.info(basket_book_stock2)"],"id":945}],[{"start":{"row":126,"column":0},"end":{"row":126,"column":4},"action":"insert","lines":["    "],"id":946}],[{"start":{"row":126,"column":4},"end":{"row":126,"column":5},"action":"insert","lines":["g"],"id":947}],[{"start":{"row":126,"column":4},"end":{"row":126,"column":5},"action":"remove","lines":["g"],"id":948}],[{"start":{"row":166,"column":0},"end":{"row":166,"column":17},"action":"remove","lines":["    iteration = 0"],"id":949}],[{"start":{"row":17,"column":9},"end":{"row":18,"column":0},"action":"insert","lines":["",""],"id":950}],[{"start":{"row":18,"column":0},"end":{"row":18,"column":17},"action":"insert","lines":["    iteration = 0"],"id":951}],[{"start":{"row":18,"column":0},"end":{"row":18,"column":4},"action":"remove","lines":["    "],"id":952}],[{"start":{"row":127,"column":4},"end":{"row":127,"column":5},"action":"insert","lines":["F"],"id":953}],[{"start":{"row":127,"column":4},"end":{"row":127,"column":5},"action":"remove","lines":["F"],"id":954}],[{"start":{"row":127,"column":4},"end":{"row":127,"column":5},"action":"insert","lines":["g"],"id":955},{"start":{"row":127,"column":5},"end":{"row":127,"column":6},"action":"insert","lines":["l"]}],[{"start":{"row":127,"column":4},"end":{"row":127,"column":6},"action":"remove","lines":["gl"],"id":956},{"start":{"row":127,"column":4},"end":{"row":127,"column":10},"action":"insert","lines":["global"]}],[{"start":{"row":127,"column":10},"end":{"row":127,"column":11},"action":"insert","lines":[" "],"id":957},{"start":{"row":127,"column":11},"end":{"row":127,"column":12},"action":"insert","lines":["T"]},{"start":{"row":127,"column":12},"end":{"row":127,"column":13},"action":"insert","lines":["o"]},{"start":{"row":127,"column":13},"end":{"row":127,"column":14},"action":"insert","lines":["t"]}],[{"start":{"row":127,"column":14},"end":{"row":127,"column":15},"action":"insert","lines":["a"],"id":958},{"start":{"row":127,"column":15},"end":{"row":127,"column":16},"action":"insert","lines":["l"]}],[{"start":{"row":127,"column":16},"end":{"row":127,"column":17},"action":"insert","lines":[" "],"id":959}],[{"start":{"row":127,"column":16},"end":{"row":127,"column":17},"action":"remove","lines":[" "],"id":960}],[{"start":{"row":127,"column":16},"end":{"row":127,"column":17},"action":"insert","lines":[","],"id":961},{"start":{"row":127,"column":17},"end":{"row":127,"column":18},"action":"insert","lines":["i"]},{"start":{"row":127,"column":18},"end":{"row":127,"column":19},"action":"insert","lines":["t"]}],[{"start":{"row":127,"column":19},"end":{"row":127,"column":20},"action":"insert","lines":["r"],"id":962}],[{"start":{"row":127,"column":19},"end":{"row":127,"column":20},"action":"remove","lines":["r"],"id":963}],[{"start":{"row":127,"column":19},"end":{"row":127,"column":20},"action":"insert","lines":["r"],"id":964}],[{"start":{"row":127,"column":19},"end":{"row":127,"column":20},"action":"remove","lines":["r"],"id":965}],[{"start":{"row":127,"column":17},"end":{"row":127,"column":19},"action":"remove","lines":["it"],"id":966},{"start":{"row":127,"column":17},"end":{"row":127,"column":26},"action":"insert","lines":["iteration"]}],[{"start":{"row":127,"column":16},"end":{"row":127,"column":17},"action":"remove","lines":[","],"id":967}],[{"start":{"row":127,"column":16},"end":{"row":128,"column":0},"action":"insert","lines":["",""],"id":968},{"start":{"row":128,"column":0},"end":{"row":128,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":128,"column":4},"end":{"row":128,"column":5},"action":"insert","lines":["g"],"id":969},{"start":{"row":128,"column":5},"end":{"row":128,"column":6},"action":"insert","lines":["l"]},{"start":{"row":128,"column":6},"end":{"row":128,"column":7},"action":"insert","lines":["o"]},{"start":{"row":128,"column":7},"end":{"row":128,"column":8},"action":"insert","lines":["b"]},{"start":{"row":128,"column":8},"end":{"row":128,"column":9},"action":"insert","lines":["a"]},{"start":{"row":128,"column":9},"end":{"row":128,"column":10},"action":"insert","lines":["l"]}],[{"start":{"row":128,"column":10},"end":{"row":128,"column":11},"action":"insert","lines":[" "],"id":970}],[{"start":{"row":177,"column":12},"end":{"row":177,"column":13},"action":"insert","lines":["g"],"id":971},{"start":{"row":177,"column":13},"end":{"row":177,"column":14},"action":"insert","lines":["l"]},{"start":{"row":177,"column":14},"end":{"row":177,"column":15},"action":"insert","lines":["o"]},{"start":{"row":177,"column":15},"end":{"row":177,"column":16},"action":"insert","lines":["b"]},{"start":{"row":177,"column":16},"end":{"row":177,"column":17},"action":"insert","lines":["a"]},{"start":{"row":177,"column":17},"end":{"row":177,"column":18},"action":"insert","lines":["l"]}],[{"start":{"row":177,"column":18},"end":{"row":177,"column":19},"action":"insert","lines":[" "],"id":972}],[{"start":{"row":178,"column":12},"end":{"row":178,"column":13},"action":"insert","lines":["g"],"id":973},{"start":{"row":178,"column":13},"end":{"row":178,"column":14},"action":"insert","lines":["l"]},{"start":{"row":178,"column":14},"end":{"row":178,"column":15},"action":"insert","lines":["o"]},{"start":{"row":178,"column":15},"end":{"row":178,"column":16},"action":"insert","lines":["b"]},{"start":{"row":178,"column":16},"end":{"row":178,"column":17},"action":"insert","lines":["a"]},{"start":{"row":178,"column":17},"end":{"row":178,"column":18},"action":"insert","lines":["l"]}],[{"start":{"row":178,"column":18},"end":{"row":178,"column":19},"action":"insert","lines":[" "],"id":974}],[{"start":{"row":157,"column":4},"end":{"row":158,"column":13},"action":"insert","lines":["Total = 0","iteration = 0"],"id":975}],[{"start":{"row":157,"column":0},"end":{"row":158,"column":13},"action":"remove","lines":["    Total = 0","iteration = 0"],"id":976}],[{"start":{"row":155,"column":0},"end":{"row":156,"column":13},"action":"insert","lines":["    Total = 0","iteration = 0"],"id":977}],[{"start":{"row":155,"column":0},"end":{"row":156,"column":13},"action":"remove","lines":["    Total = 0","iteration = 0"],"id":978}],[{"start":{"row":157,"column":0},"end":{"row":158,"column":20},"action":"insert","lines":["    global Total","    global iteration"],"id":979}],[{"start":{"row":178,"column":18},"end":{"row":178,"column":19},"action":"remove","lines":[" "],"id":981},{"start":{"row":178,"column":17},"end":{"row":178,"column":18},"action":"remove","lines":["l"]},{"start":{"row":178,"column":16},"end":{"row":178,"column":17},"action":"remove","lines":["a"]},{"start":{"row":178,"column":15},"end":{"row":178,"column":16},"action":"remove","lines":["b"]},{"start":{"row":178,"column":14},"end":{"row":178,"column":15},"action":"remove","lines":["o"]},{"start":{"row":178,"column":13},"end":{"row":178,"column":14},"action":"remove","lines":["l"]},{"start":{"row":178,"column":12},"end":{"row":178,"column":13},"action":"remove","lines":["g"]}],[{"start":{"row":179,"column":18},"end":{"row":179,"column":19},"action":"remove","lines":[" "],"id":982},{"start":{"row":179,"column":17},"end":{"row":179,"column":18},"action":"remove","lines":["l"]},{"start":{"row":179,"column":16},"end":{"row":179,"column":17},"action":"remove","lines":["a"]},{"start":{"row":179,"column":15},"end":{"row":179,"column":16},"action":"remove","lines":["b"]},{"start":{"row":179,"column":14},"end":{"row":179,"column":15},"action":"remove","lines":["o"]},{"start":{"row":179,"column":13},"end":{"row":179,"column":14},"action":"remove","lines":["l"]},{"start":{"row":179,"column":12},"end":{"row":179,"column":13},"action":"remove","lines":["g"]}],[{"start":{"row":179,"column":24},"end":{"row":179,"column":36},"action":"remove","lines":["iteration + "],"id":983}],[{"start":{"row":170,"column":4},"end":{"row":170,"column":5},"action":"insert","lines":["'"],"id":984},{"start":{"row":170,"column":5},"end":{"row":170,"column":6},"action":"insert","lines":["'"]},{"start":{"row":170,"column":6},"end":{"row":170,"column":7},"action":"insert","lines":["'"]}],[{"start":{"row":188,"column":38},"end":{"row":188,"column":39},"action":"insert","lines":["'"],"id":985},{"start":{"row":188,"column":39},"end":{"row":188,"column":40},"action":"insert","lines":["'"]},{"start":{"row":188,"column":40},"end":{"row":188,"column":41},"action":"insert","lines":["'"]}],[{"start":{"row":170,"column":6},"end":{"row":170,"column":7},"action":"remove","lines":["'"],"id":986},{"start":{"row":170,"column":5},"end":{"row":170,"column":6},"action":"remove","lines":["'"]},{"start":{"row":170,"column":4},"end":{"row":170,"column":5},"action":"remove","lines":["'"]}],[{"start":{"row":188,"column":40},"end":{"row":188,"column":41},"action":"remove","lines":["'"],"id":987},{"start":{"row":188,"column":39},"end":{"row":188,"column":40},"action":"remove","lines":["'"]},{"start":{"row":188,"column":38},"end":{"row":188,"column":39},"action":"remove","lines":["'"]}],[{"start":{"row":140,"column":74},"end":{"row":140,"column":75},"action":"insert","lines":[" "],"id":988},{"start":{"row":140,"column":75},"end":{"row":140,"column":76},"action":"insert","lines":["o"]},{"start":{"row":140,"column":76},"end":{"row":140,"column":77},"action":"insert","lines":["r"]}],[{"start":{"row":140,"column":77},"end":{"row":140,"column":78},"action":"insert","lines":[" "],"id":989}],[{"start":{"row":140,"column":78},"end":{"row":140,"column":79},"action":"insert","lines":["i"],"id":990},{"start":{"row":140,"column":79},"end":{"row":140,"column":80},"action":"insert","lines":["t"]},{"start":{"row":140,"column":80},"end":{"row":140,"column":81},"action":"insert","lines":["e"]},{"start":{"row":140,"column":81},"end":{"row":140,"column":82},"action":"insert","lines":["r"]},{"start":{"row":140,"column":82},"end":{"row":140,"column":83},"action":"insert","lines":["a"]}],[{"start":{"row":140,"column":83},"end":{"row":140,"column":84},"action":"insert","lines":["t"],"id":991},{"start":{"row":140,"column":84},"end":{"row":140,"column":85},"action":"insert","lines":["i"]},{"start":{"row":140,"column":85},"end":{"row":140,"column":86},"action":"insert","lines":["o"]},{"start":{"row":140,"column":86},"end":{"row":140,"column":87},"action":"insert","lines":["n"]}],[{"start":{"row":140,"column":87},"end":{"row":140,"column":88},"action":"insert","lines":[" "],"id":992},{"start":{"row":140,"column":88},"end":{"row":140,"column":89},"action":"insert","lines":["="]},{"start":{"row":140,"column":89},"end":{"row":140,"column":90},"action":"insert","lines":["="]}],[{"start":{"row":140,"column":90},"end":{"row":140,"column":91},"action":"insert","lines":[" "],"id":993},{"start":{"row":140,"column":91},"end":{"row":140,"column":92},"action":"insert","lines":["0"]}],[{"start":{"row":132,"column":11},"end":{"row":132,"column":12},"action":"insert","lines":["i"],"id":994},{"start":{"row":132,"column":12},"end":{"row":132,"column":13},"action":"insert","lines":["t"]},{"start":{"row":132,"column":13},"end":{"row":132,"column":14},"action":"insert","lines":["e"]},{"start":{"row":132,"column":14},"end":{"row":132,"column":15},"action":"insert","lines":["r"]},{"start":{"row":132,"column":15},"end":{"row":132,"column":16},"action":"insert","lines":["a"]},{"start":{"row":132,"column":16},"end":{"row":132,"column":17},"action":"insert","lines":["t"]},{"start":{"row":132,"column":17},"end":{"row":132,"column":18},"action":"insert","lines":["i"]},{"start":{"row":132,"column":18},"end":{"row":132,"column":19},"action":"insert","lines":["o"]}],[{"start":{"row":132,"column":19},"end":{"row":132,"column":20},"action":"insert","lines":[" "],"id":995},{"start":{"row":132,"column":20},"end":{"row":132,"column":21},"action":"insert","lines":[" "]}],[{"start":{"row":132,"column":20},"end":{"row":132,"column":21},"action":"remove","lines":[" "],"id":996},{"start":{"row":132,"column":19},"end":{"row":132,"column":20},"action":"remove","lines":[" "]}],[{"start":{"row":132,"column":19},"end":{"row":132,"column":20},"action":"insert","lines":["n"],"id":997}],[{"start":{"row":132,"column":20},"end":{"row":132,"column":21},"action":"insert","lines":[" "],"id":998},{"start":{"row":132,"column":21},"end":{"row":132,"column":22},"action":"insert","lines":["!"]}],[{"start":{"row":132,"column":22},"end":{"row":132,"column":23},"action":"insert","lines":["="],"id":999}],[{"start":{"row":132,"column":23},"end":{"row":132,"column":24},"action":"insert","lines":[" "],"id":1000},{"start":{"row":132,"column":24},"end":{"row":132,"column":25},"action":"insert","lines":["0"]}],[{"start":{"row":132,"column":25},"end":{"row":132,"column":26},"action":"insert","lines":[" "],"id":1001},{"start":{"row":132,"column":26},"end":{"row":132,"column":27},"action":"insert","lines":["a"]},{"start":{"row":132,"column":27},"end":{"row":132,"column":28},"action":"insert","lines":["n"]},{"start":{"row":132,"column":28},"end":{"row":132,"column":29},"action":"insert","lines":["d"]}],[{"start":{"row":132,"column":29},"end":{"row":132,"column":30},"action":"insert","lines":[" "],"id":1002}],[{"start":{"row":140,"column":78},"end":{"row":140,"column":92},"action":"remove","lines":["iteration == 0"],"id":1003}],[{"start":{"row":140,"column":11},"end":{"row":140,"column":25},"action":"insert","lines":["iteration == 0"],"id":1004}],[{"start":{"row":140,"column":25},"end":{"row":140,"column":26},"action":"insert","lines":[" "],"id":1005},{"start":{"row":140,"column":26},"end":{"row":140,"column":27},"action":"insert","lines":["o"]},{"start":{"row":140,"column":27},"end":{"row":140,"column":28},"action":"insert","lines":["r"]}],[{"start":{"row":140,"column":28},"end":{"row":140,"column":29},"action":"insert","lines":[" "],"id":1006}],[{"start":{"row":140,"column":96},"end":{"row":140,"column":97},"action":"remove","lines":[" "],"id":1007},{"start":{"row":140,"column":95},"end":{"row":140,"column":96},"action":"remove","lines":[" "]},{"start":{"row":140,"column":94},"end":{"row":140,"column":95},"action":"remove","lines":["r"]},{"start":{"row":140,"column":93},"end":{"row":140,"column":94},"action":"remove","lines":["o"]}],[{"start":{"row":170,"column":0},"end":{"row":179,"column":25},"action":"remove","lines":["    Now_pnl = e.get_pnl()","    sleep_duration_sec = 5","    ini = False","    while not ini :","        bid_response: InsertOrderResponse = e.insert_order(BASKET_INSTRUMENT_ID, price=basket_book_bucket.bids[0].price + 0.5, volume=50, side=SIDE_BID, order_type=ORDER_TYPE_LIMIT)","        print_order_response(bid_response)","        if bid_response.success:","            ini = True","            Total = basket_book_bucket.bids[0].price + 0.5","            iteration = 1"],"id":1008},{"start":{"row":169,"column":0},"end":{"row":170,"column":0},"action":"remove","lines":["",""]},{"start":{"row":168,"column":22},"end":{"row":169,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":169,"column":0},"end":{"row":169,"column":4},"action":"remove","lines":["    "],"id":1009},{"start":{"row":168,"column":22},"end":{"row":169,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":180,"column":10},"action":"remove","lines":["import logging","import time","from typing import List","from optibook import common_types as t","from optibook import ORDER_TYPE_IOC, ORDER_TYPE_LIMIT, SIDE_ASK, SIDE_BID","from optibook.exchange_responses import InsertOrderResponse","from optibook.synchronous_client import Exchange","import random","import json","","logging.getLogger('client').setLevel('ERROR')","logger = logging.getLogger(__name__)","","BASKET_INSTRUMENT_ID = 'C2_GREEN_ENERGY_ETF'","","STOCK_INSTRUMENT_IDS = ['C2_SOLAR_CO', 'C2_WIND_LTD']","","Total = 0","iteration = 0","","e = Exchange()","e.connect()","","def downloadOrderBook(instr):","    '''","    Returns the current bids and asks for the given instrument.","    ","    Parameters","    ------------","    instr: string","        Instrument ('PHILIPS_A' or 'PHILIPS_B').","        No assertion is done for perfomance reasons","        ","        ","    Returns","    ---------","    book.bids, book.asks : PriceVolume, PriceVolume","        Lists of `PriceVolume` objects corresponding to bids and asks for the ","        supplied instrument","    '''","    ","    book = e.get_last_price_book(instr)","    return book.bids, book.asks","","def printCurrentPositions():","    '''","    Prints all current positions, plus position cash","    '''","    positions = e.get_positions_and_cash()","    for p in positions:","        print(p, positions[p])","","","def deleteAllOutstandingOrders(instrument_id, side):","    \"\"\"","    Exits all outstanding positions for the chosen instrument and order type","    ","    Parameters","    ----------","    instrument_id:  str","        Intrument ID (`PHILIPS_A` or `PHILIPS_B`) (no assertion is done ","            for perfomance)","    side: str","        string representing the types of outstanding orders we wish to close.","        Select from 'bid', 'ask', or 'all'","    Returns","    -------","    None","    \"\"\"","    outstanding = e.get_outstanding_orders(instrument_id)","    for o in outstanding.values():","        if(o.side == side or side=='all'):","            result = e.delete_order(instrument_id, order_id=o.order_id)","","def closeAllPosition(debug=False):","    '''","    Iterates and attempts to close all open positions","    ","    Parameters","    -----------","    debug : Bool","        If true, we print our current positions before and after attempting","        to close","    '''","    if(debug):","        print(\"Starting Positions: \")","        print(e.get_positions())","    for s, p in e.get_positions().items():","        if p > 0:","            e.insert_order(s, price=1, volume=p, side='ask', order_type='ioc')","        elif p < 0:","            e.insert_order(s, price=100000, volume=-p, side='bid', order_type='ioc')  ","    if(debug):","        print(\"End Positions: \")","        print(e.get_positions())","","def print_report(e: Exchange):","    pnl = e.get_pnl()","    positions = e.get_positions()","    my_trades = e.poll_new_trades(BASKET_INSTRUMENT_ID)","    all_market_trades = e.poll_new_trade_ticks(BASKET_INSTRUMENT_ID)","    logger.info(f'I have done {len(my_trades)} trade(s) in {BASKET_INSTRUMENT_ID} since the last report. There have been {len(all_market_trades)} market trade(s) in total in {BASKET_INSTRUMENT_ID} since the last report.')","    logger.info(f'My PNL is: {pnl:.2f}')","    logger.info(f'My current positions are: {json.dumps(positions, indent=3)}')","","","def print_order_response(order_response: InsertOrderResponse):","    if order_response.success:","        logger.info(f\"Inserted order successfully, order_id='{order_response.order_id}'\")","    else:","        logger.info(f\"Unable to insert order with reason: '{order_response.success}'\")","","","def trade_cycle(e: Exchange):","    # because we use limit orders, always delete existing orders that remain from the previous iteration","    e.delete_orders(BASKET_INSTRUMENT_ID)","    e.delete_orders(STOCK_INSTRUMENT_IDS[0])","    e.delete_orders(STOCK_INSTRUMENT_IDS[1])","    ","    ","    basket_book_bucket = e.get_last_price_book(BASKET_INSTRUMENT_ID)","    basket_book_stock1 = e.get_last_price_book(STOCK_INSTRUMENT_IDS[0])","    basket_book_stock2 = e.get_last_price_book(STOCK_INSTRUMENT_IDS[1])","    ","    logger.info(basket_book_bucket)","    logger.info(basket_book_stock1)","    logger.info(basket_book_stock2)","    global Total","    global iteration","    ","    if basket_book_bucket and basket_book_bucket.bids and basket_book_bucket.asks:","        logger.info(f'Order book for {BASKET_INSTRUMENT_ID}: best bid={basket_book_bucket.bids[0].price:.2f}, best ask={basket_book_bucket.asks[0].price:.2f}')","        if iteration != 0 and float(Total/iteration) > basket_book_bucket.bids[0].price + 0.1 :","            basket_book_bucket = e.get_last_price_book(BASKET_INSTRUMENT_ID)","            bid_response: InsertOrderResponse = e.insert_order(BASKET_INSTRUMENT_ID, price=basket_book_bucket.bids[0].price + 0.1, volume=50, side=SIDE_BID, order_type=ORDER_TYPE_LIMIT)","            print_order_response(bid_response)","            if bid_response.success:","                Total = Total + basket_book_bucket.bids[0].price + 0.1","                iteration = iteration + 1","                ","        if iteration == 0 or float(Total/iteration) < basket_book_bucket.asks[0].price - 0.1 :","            basket_book_bucket = e.get_last_price_book(BASKET_INSTRUMENT_ID)","            ask_response: InsertOrderResponse = e.insert_order(BASKET_INSTRUMENT_ID, price=basket_book_bucket.asks[0].price - 0.1, volume=50, side=SIDE_ASK, order_type=ORDER_TYPE_LIMIT)","            print_order_response(ask_response)","            if ask_response.success:","                Total = Total - 2*float(Total/iteration) + float(basket_book_bucket.asks[0].price - 0.1)","                iteration = iteration - 1","                ","                ","            ","    else:","        logger.info('No top bid/ask or no book at all for the basket instrument')","","    print_report(e)","    ","","def main():","    global Total","    global iteration","    # you can also define host/user/pass yourself","    # when not defined, it is taken from ~/.optibook file if it exists","    # if that file does not exists, an error is thrown","    #exchange = Exchange(host='host-to-connect-to', info_port=7001, exec_port=8001, username='your-username', password='your-password')","    #exchange.connect()","    basket_book_bucket = e.get_last_price_book(BASKET_INSTRUMENT_ID)","    ","    logger.info(basket_book_bucket)","","    closeAllPosition()","    ","    while True:","        pnl = e.get_pnl()","        logger.info(\"earning this money\")","        logger.info(pnl - Now_pnl)","        trade_cycle(e)","        logger.info(f'Iteration complete. Sleeping for {sleep_duration_sec} seconds')","        time.sleep(sleep_duration_sec)","","","if __name__ == '__main__':","    main()"],"id":1010},{"start":{"row":0,"column":0},"end":{"row":145,"column":10},"action":"insert","lines":["'''","EXAMPLE AUTO QUOTER","","Do not edit this file directly. Instead, copy it somewhere else in your workspace.","These are simple bots that illustrate the Optibook API and some simple trading concepts. These bots will not make a profit.","","This is an example bot that quotes the instrument C2_GREEN_ENERGY_ETF.","Quoting an instrument means sending both bids and asks at the same time and making these publicly visible in the order book,","so that other participants can trade with you. The logic of this bot is very simple. It looks at the current order book and tries to ","improve the price by 0.10 cents if possible. If the best bid is 90 and the best ask is 91, it will try to send a bid=90.10 and ask=90.90.","'''","import logging","import time","from typing import List","from optibook import common_types as t","from optibook import ORDER_TYPE_IOC, ORDER_TYPE_LIMIT, SIDE_ASK, SIDE_BID","from optibook.exchange_responses import InsertOrderResponse","from optibook.synchronous_client import Exchange","import random","import json","","logging.getLogger('client').setLevel('ERROR')","logger = logging.getLogger(__name__)","","BASKET_INSTRUMENT_IDS = ['C1_FOSSIL_FUEL_ETF', 'C2_GREEN_ENERGY_ETF']","STOCK_INSTRUMENT_IDS = ['C1_GAS_INC', 'C1_OIL_CORP', 'C2_SOLAR_CO', 'C2_WIND_LTD']","ALL_IDS = ['C1_FOSSIL_FUEL_ETF', 'C2_GREEN_ENERGY_ETF', 'C1_GAS_INC', 'C1_OIL_CORP', 'C2_SOLAR_CO', 'C2_WIND_LTD']","","","def closeAllPosition(e, debug=False):","    '''","    Iterates and attempts to close all open positions","    ","    Parameters","    -----------","    debug : Bool","        If true, we print our current positions before and after attempting","        to close","    '''","    if(debug):","        print(\"Starting Positions: \")","        print(e.get_positions())","    for s, p in e.get_positions().items():","        if p > 0:","            e.insert_order(s, price=1, volume=p, side='ask', order_type='ioc')","        elif p < 0:","            e.insert_order(s, price=100000, volume=-p, side='bid', order_type='ioc')  ","    if(debug):","        print(\"End Positions: \")","        print(e.get_positions())","","def print_order_response(order_response: InsertOrderResponse):","    if order_response.success:","        logger.info(f\"Inserted order successfully, order_id='{order_response.order_id}'\")","    else:","        logger.info(f\"Unable to insert order with reason: '{order_response.success}'\")","","def exists_gain(e, b_id, s1_id, s2_id):","    book_b = e.get_last_price_book(b_id)","    book_s1 = e.get_last_price_book(s1_id)","    book_s2 = e.get_last_price_book(s2_id)","    ","    if book_b and book_s1.bids and book_s2.bids and book_b.asks:","        if ((book_s1.bids[0].price + book_s2.bids[0].price) > 2*book_b.asks[0].price + 0.05):","            # print([0, book_b.asks[0].price, book_b.asks[0].volume, book_s1.bids[0].price, book_s1.bids[0].volume, book_s2.bids[0].price, book_s2.bids[0].volume])","            return [0, book_b.asks[0].price, book_b.asks[0].volume, book_s1.bids[0].price, book_s1.bids[0].volume, book_s2.bids[0].price, book_s2.bids[0].volume]","            ","    if book_b and book_s1.asks and book_s2.asks and book_b.bids:","        if (book_s1.asks[0].price + book_s2.asks[0].price + 0.05 < 2*book_b.bids[0].price):","            # print([1, book_b.bids[0].price, book_b.bids[0].volume, book_s1.asks[0].price, book_s1.asks[0].volume, book_s2.asks[0].price, book_s2.asks[0].volume])","            return [1, book_b.bids[0].price, book_b.bids[0].volume, book_s1.asks[0].price, book_s1.asks[0].volume, book_s2.asks[0].price, book_s2.asks[0].volume]","","    return [False]","    ","def trade_cycle(e: Exchange):","    pass","","","def main():","    exchange = Exchange()","    exchange.connect()","    ","    # closeAllPosition(exchange)","    print(exchange.get_positions_and_cash())","    ","    volume_basket = 4","    volume_stock = 2","    ","    while True:","        case = [\"C1_FOSSIL_FUEL_ETF\", \"C1_GAS_INC\", \"C1_OIL_CORP\"]","        result = exists_gain(exchange, case[0], case[1], case[2])","        if len(result)<=1: ","            case = [\"C2_GREEN_ENERGY_ETF\", 'C2_SOLAR_CO', 'C2_WIND_LTD']","            result = exists_gain(exchange, case[0], case[1], case[2])","            if len(result)<=1:","                # time.sleep(1)","                continue","            ","        print(\"REsult in main: \", result)","        ","        positions_and_cash = exchange.get_positions_and_cash()","        ","        if result[0]==0:","            print(exchange.get_pnl())","            if positions_and_cash[case[0]][\"volume\"] < volume_basket:","                response: InsertOrderResponse = exchange.insert_order(case[0], price=result[1], volume=volume_basket, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            if positions_and_cash[case[1]][\"volume\"] >= volume_stock:","                response: InsertOrderResponse = exchange.insert_order(case[1], price=result[3], volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            if positions_and_cash[case[2]][\"volume\"] >= volume_stock:","                response: InsertOrderResponse = exchange.insert_order(case[2], price=result[5], volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            print(exchange.get_pnl())","        if result[0]==1:","            print(exchange.get_pnl())","            if positions_and_cash[case[0]][\"volume\"] >= volume_basket:","                response: InsertOrderResponse = exchange.insert_order(case[0], price=result[1], volume=volume_basket, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            if positions_and_cash[case[1]][\"volume\"] < volume_stock:","                response: InsertOrderResponse = exchange.insert_order(case[1], price=result[3], volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            if positions_and_cash[case[2]][\"volume\"] < volume_stock:","                response: InsertOrderResponse = exchange.insert_order(case[2], price=result[5], volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            print(exchange.get_pnl())","            ","        '''","        for pos in positions_and_cash:","            if positions_and_cash[pos][\"volume\"] > 280:","                response: InsertOrderResponse = exchange.insert_order(pos, price=50, volume=15, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            if positions_and_cash[pos][\"volume\"]< -280:","                response: InsertOrderResponse = exchange.insert_order(pos, price=210, volume=15, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","        '''","        ","        # time.sleep(1)","        ","        ","    ","    print(exchange.get_positions_and_cash())","    ","","if __name__ == '__main__':","    main()"]}],[{"start":{"row":0,"column":0},"end":{"row":145,"column":10},"action":"remove","lines":["'''","EXAMPLE AUTO QUOTER","","Do not edit this file directly. Instead, copy it somewhere else in your workspace.","These are simple bots that illustrate the Optibook API and some simple trading concepts. These bots will not make a profit.","","This is an example bot that quotes the instrument C2_GREEN_ENERGY_ETF.","Quoting an instrument means sending both bids and asks at the same time and making these publicly visible in the order book,","so that other participants can trade with you. The logic of this bot is very simple. It looks at the current order book and tries to ","improve the price by 0.10 cents if possible. If the best bid is 90 and the best ask is 91, it will try to send a bid=90.10 and ask=90.90.","'''","import logging","import time","from typing import List","from optibook import common_types as t","from optibook import ORDER_TYPE_IOC, ORDER_TYPE_LIMIT, SIDE_ASK, SIDE_BID","from optibook.exchange_responses import InsertOrderResponse","from optibook.synchronous_client import Exchange","import random","import json","","logging.getLogger('client').setLevel('ERROR')","logger = logging.getLogger(__name__)","","BASKET_INSTRUMENT_IDS = ['C1_FOSSIL_FUEL_ETF', 'C2_GREEN_ENERGY_ETF']","STOCK_INSTRUMENT_IDS = ['C1_GAS_INC', 'C1_OIL_CORP', 'C2_SOLAR_CO', 'C2_WIND_LTD']","ALL_IDS = ['C1_FOSSIL_FUEL_ETF', 'C2_GREEN_ENERGY_ETF', 'C1_GAS_INC', 'C1_OIL_CORP', 'C2_SOLAR_CO', 'C2_WIND_LTD']","","","def closeAllPosition(e, debug=False):","    '''","    Iterates and attempts to close all open positions","    ","    Parameters","    -----------","    debug : Bool","        If true, we print our current positions before and after attempting","        to close","    '''","    if(debug):","        print(\"Starting Positions: \")","        print(e.get_positions())","    for s, p in e.get_positions().items():","        if p > 0:","            e.insert_order(s, price=1, volume=p, side='ask', order_type='ioc')","        elif p < 0:","            e.insert_order(s, price=100000, volume=-p, side='bid', order_type='ioc')  ","    if(debug):","        print(\"End Positions: \")","        print(e.get_positions())","","def print_order_response(order_response: InsertOrderResponse):","    if order_response.success:","        logger.info(f\"Inserted order successfully, order_id='{order_response.order_id}'\")","    else:","        logger.info(f\"Unable to insert order with reason: '{order_response.success}'\")","","def exists_gain(e, b_id, s1_id, s2_id):","    book_b = e.get_last_price_book(b_id)","    book_s1 = e.get_last_price_book(s1_id)","    book_s2 = e.get_last_price_book(s2_id)","    ","    if book_b and book_s1.bids and book_s2.bids and book_b.asks:","        if ((book_s1.bids[0].price + book_s2.bids[0].price) > 2*book_b.asks[0].price + 0.05):","            # print([0, book_b.asks[0].price, book_b.asks[0].volume, book_s1.bids[0].price, book_s1.bids[0].volume, book_s2.bids[0].price, book_s2.bids[0].volume])","            return [0, book_b.asks[0].price, book_b.asks[0].volume, book_s1.bids[0].price, book_s1.bids[0].volume, book_s2.bids[0].price, book_s2.bids[0].volume]","            ","    if book_b and book_s1.asks and book_s2.asks and book_b.bids:","        if (book_s1.asks[0].price + book_s2.asks[0].price + 0.05 < 2*book_b.bids[0].price):","            # print([1, book_b.bids[0].price, book_b.bids[0].volume, book_s1.asks[0].price, book_s1.asks[0].volume, book_s2.asks[0].price, book_s2.asks[0].volume])","            return [1, book_b.bids[0].price, book_b.bids[0].volume, book_s1.asks[0].price, book_s1.asks[0].volume, book_s2.asks[0].price, book_s2.asks[0].volume]","","    return [False]","    ","def trade_cycle(e: Exchange):","    pass","","","def main():","    exchange = Exchange()","    exchange.connect()","    ","    # closeAllPosition(exchange)","    print(exchange.get_positions_and_cash())","    ","    volume_basket = 4","    volume_stock = 2","    ","    while True:","        case = [\"C1_FOSSIL_FUEL_ETF\", \"C1_GAS_INC\", \"C1_OIL_CORP\"]","        result = exists_gain(exchange, case[0], case[1], case[2])","        if len(result)<=1: ","            case = [\"C2_GREEN_ENERGY_ETF\", 'C2_SOLAR_CO', 'C2_WIND_LTD']","            result = exists_gain(exchange, case[0], case[1], case[2])","            if len(result)<=1:","                # time.sleep(1)","                continue","            ","        print(\"REsult in main: \", result)","        ","        positions_and_cash = exchange.get_positions_and_cash()","        ","        if result[0]==0:","            print(exchange.get_pnl())","            if positions_and_cash[case[0]][\"volume\"] < volume_basket:","                response: InsertOrderResponse = exchange.insert_order(case[0], price=result[1], volume=volume_basket, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            if positions_and_cash[case[1]][\"volume\"] >= volume_stock:","                response: InsertOrderResponse = exchange.insert_order(case[1], price=result[3], volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            if positions_and_cash[case[2]][\"volume\"] >= volume_stock:","                response: InsertOrderResponse = exchange.insert_order(case[2], price=result[5], volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            print(exchange.get_pnl())","        if result[0]==1:","            print(exchange.get_pnl())","            if positions_and_cash[case[0]][\"volume\"] >= volume_basket:","                response: InsertOrderResponse = exchange.insert_order(case[0], price=result[1], volume=volume_basket, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            if positions_and_cash[case[1]][\"volume\"] < volume_stock:","                response: InsertOrderResponse = exchange.insert_order(case[1], price=result[3], volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            if positions_and_cash[case[2]][\"volume\"] < volume_stock:","                response: InsertOrderResponse = exchange.insert_order(case[2], price=result[5], volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            print(exchange.get_pnl())","            ","        '''","        for pos in positions_and_cash:","            if positions_and_cash[pos][\"volume\"] > 280:","                response: InsertOrderResponse = exchange.insert_order(pos, price=50, volume=15, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","            if positions_and_cash[pos][\"volume\"]< -280:","                response: InsertOrderResponse = exchange.insert_order(pos, price=210, volume=15, side=SIDE_BID, order_type=ORDER_TYPE_IOC)","                print_order_response(response)","        '''","        ","        # time.sleep(1)","        ","        ","    ","    print(exchange.get_positions_and_cash())","    ","","if __name__ == '__main__':","    main()"],"id":1011,"ignore":true}]]}}