{"changed":true,"filter":false,"title":"BasicApproachAverage.py","tooltip":"/JInheng/BasicApproachAverage.py","value":"'''\nEXAMPLE AUTO QUOTER\n\nDo not edit this file directly. Instead, copy it somewhere else in your workspace.\nThese are simple bots that illustrate the Optibook API and some simple trading concepts. These bots will not make a profit.\n\nThis is an example bot that quotes the instrument C2_GREEN_ENERGY_ETF.\nQuoting an instrument means sending both bids and asks at the same time and making these publicly visible in the order book,\nso that other participants can trade with you. The logic of this bot is very simple. It looks at the current order book and tries to \nimprove the price by 0.10 cents if possible. If the best bid is 90 and the best ask is 91, it will try to send a bid=90.10 and ask=90.90.\n'''\nimport logging\nimport time\nfrom typing import List\nfrom optibook import common_types as t\nfrom optibook import ORDER_TYPE_IOC, ORDER_TYPE_LIMIT, SIDE_ASK, SIDE_BID\nfrom optibook.exchange_responses import InsertOrderResponse\nfrom optibook.synchronous_client import Exchange\nimport random\nimport json\n\nlogging.getLogger('client').setLevel('ERROR')\nlogger = logging.getLogger(__name__)\n\nBASKET_INSTRUMENT_IDS = ['C1_FOSSIL_FUEL_ETF', 'C2_GREEN_ENERGY_ETF']\nSTOCK_INSTRUMENT_IDS = ['C1_GAS_INC', 'C1_OIL_CORP', 'C2_SOLAR_CO', 'C2_WIND_LTD']\nALL_IDS = ['C1_FOSSIL_FUEL_ETF', 'C2_GREEN_ENERGY_ETF', 'C1_GAS_INC', 'C1_OIL_CORP', 'C2_SOLAR_CO', 'C2_WIND_LTD']\n\n\ndef closeAllPosition(e, debug=False):\n    '''\n    Iterates and attempts to close all open positions\n    \n    Parameters\n    -----------\n    debug : Bool\n        If true, we print our current positions before and after attempting\n        to close\n    '''\n    if(debug):\n        print(\"Starting Positions: \")\n        print(e.get_positions())\n    for s, p in e.get_positions().items():\n        if p > 0:\n            e.insert_order(s, price=1, volume=p, side='ask', order_type='ioc')\n        elif p < 0:\n            e.insert_order(s, price=100000, volume=-p, side='bid', order_type='ioc')  \n    if(debug):\n        print(\"End Positions: \")\n        print(e.get_positions())\n\ndef print_order_response(order_response: InsertOrderResponse):\n    if order_response.success:\n        logger.info(f\"Inserted order successfully, order_id='{order_response.order_id}'\")\n    else:\n        logger.info(f\"Unable to insert order with reason: '{order_response.success}'\")\n\ndef exists_gain(e, b_id, s1_id, s2_id):\n    book_b = e.get_last_price_book(b_id)\n    book_s1 = e.get_last_price_book(s1_id)\n    book_s2 = e.get_last_price_book(s2_id)\n    \n    if book_b and book_s1.bids and book_s2.bids and book_b.asks:\n        # Comprar stock y vender basket \n        gain = (book_s1.bids[0].price + book_s2.bids[0].price) - (2*book_b.asks[0].price)\n        if (gain > 0.3):\n            # print([0, book_b.asks[0].price, book_b.asks[0].volume, book_s1.bids[0].price, book_s1.bids[0].volume, book_s2.bids[0].price, book_s2.bids[0].volume])\n            return [0, book_b.asks[0].price, book_b.asks[0].volume, book_s1.bids[0].price, book_s1.bids[0].volume, book_s2.bids[0].price, book_s2.bids[0].volume, gain]\n            \n    if book_b and book_s1.asks and book_s2.asks and book_b.bids:\n        # Comprar basket y vender stock\n        gain = (2*book_b.bids[0].price) - (book_s1.asks[0].price + book_s2.asks[0].price)\n        if (gain > 0.3):\n            # print([1, book_b.bids[0].price, book_b.bids[0].volume, book_s1.asks[0].price, book_s1.asks[0].volume, book_s2.asks[0].price, book_s2.asks[0].volume])\n            return [1, book_b.bids[0].price, book_b.bids[0].volume, book_s1.asks[0].price, book_s1.asks[0].volume, book_s2.asks[0].price, book_s2.asks[0].volume, gain]\n\n    return [False]\n    \ndef trade_cycle(e: Exchange):\n    pass\n\n\ndef main():\n    exchange = Exchange()\n    exchange.connect()\n    \n    #closeAllPosition(exchange)\n    print(exchange.get_positions_and_cash())\n    \n    volume_basket = 10\n    volume_stock = 5\n    #init prices first time!!!\n    C1_b_pre_b_price = exchange.get_last_price_book(\"C1_FOSSIL_FUEL_ETF\").bids[0].price\n    C1_b_pre_s_price = exchange.get_last_price_book(\"C1_FOSSIL_FUEL_ETF\").asks[0].price\n    \n    C1_s1_pre_b_price = exchange.get_last_price_book(\"C1_GAS_INC\").bids[0].price\n    C1_s1_pre_s_price = exchange.get_last_price_book(\"C1_GAS_INC\").asks[0].price\n    \n    C1_s2_pre_b_price = exchange.get_last_price_book(\"C1_OIL_CORP\").bids[0].price\n    C1_s2_pre_s_price = exchange.get_last_price_book(\"C1_OIL_CORP\").asks[0].price\n    \n    C2_b_pre_b_price = exchange.get_last_price_book(\"C2_GREEN_ENERGY_ETF\").bids[0].price\n    C2_b_pre_s_price = exchange.get_last_price_book(\"C2_GREEN_ENERGY_ETF\").asks[0].price\n    \n    C2_s1_pre_b_price = exchange.get_last_price_book(\"C2_SOLAR_CO\").bids[0].price\n    C2_s1_pre_s_price = exchange.get_last_price_book(\"C2_SOLAR_CO\").asks[0].price\n    \n    C2_s2_pre_b_price = exchange.get_last_price_book(\"C2_WIND_LTD\").bids[0].price\n    C2_s2_pre_s_price = exchange.get_last_price_book(\"C2_WIND_LTD\").asks[0].price\n    \n    \n    iterator = 0\n    while True:\n        iterator = iterator + 1\n        case = [\"C1_FOSSIL_FUEL_ETF\", \"C1_GAS_INC\", \"C1_OIL_CORP\"]\n        case1 = [\"C2_GREEN_ENERGY_ETF\", 'C2_SOLAR_CO', 'C2_WIND_LTD']\n        result = exists_gain(exchange, case[0], case[1], case[2])\n        if len(result)<=1: \n            case = [\"C2_GREEN_ENERGY_ETF\", 'C2_SOLAR_CO', 'C2_WIND_LTD']\n            result = exists_gain(exchange, case[0], case[1], case[2])\n            if len(result)<=1:\n                # time.sleep(1)\n                continue\n            \n        print(\"REsult in main: \", result)\n        \n        positions_and_cash = exchange.get_positions_and_cash()\n        \n        if  positions_and_cash[case[0]][\"volume\"] < -volume_basket:\n            if exchange.get_last_price_book(\"C1_FOSSIL_FUEL_ETF\").bids[0].price < float(C1_b_pre_b_price/iterator):\n                response: InsertOrderResponse = exchange.insert_order(\"C1_FOSSIL_FUEL_ETF\", price=exchange.get_last_price_book(\"C1_FOSSIL_FUEL_ETF\").bids[0].price + 0.1, volume=volume_basket, side=SIDE_BID, order_type=ORDER_TYPE_IOC)\n        elif  positions_and_cash[case[0]][\"volume\"] > volume_basket :\n            if exchange.get_last_price_book(\"C1_FOSSIL_FUEL_ETF\").asks[0].price > float(C1_b_pre_s_price/iterator):\n                response: InsertOrderResponse = exchange.insert_order(\"C1_FOSSIL_FUEL_ETF\", price=exchange.get_last_price_book(\"C1_FOSSIL_FUEL_ETF\").asks[0].price - 0.1, volume=volume_basket, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)\n        \n        C1_b_pre_b_price = C1_b_pre_b_price + exchange.get_last_price_book(\"C1_FOSSIL_FUEL_ETF\").bids[0].price\n        C1_b_pre_s_price = C1_b_pre_s_price + exchange.get_last_price_book(\"C1_FOSSIL_FUEL_ETF\").asks[0].price\n        \n        if  positions_and_cash[case[1]][\"volume\"] < -volume_stock:\n            if exchange.get_last_price_book(\"C1_GAS_INC\").bids[0].price < float(C1_s1_pre_b_price/iterator):\n                response: InsertOrderResponse = exchange.insert_order(\"C1_FOSSIL_FUEL_ETF\", price=exchange.get_last_price_book(\"C1_GAS_INC\").bids[0].price + 0.1, volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_IOC)\n        elif  positions_and_cash[case[1]][\"volume\"] > volume_stock:\n            if exchange.get_last_price_book(\"C1_GAS_INC\").asks[0].price > float(C1_s1_pre_s_price/iterator):\n                response: InsertOrderResponse = exchange.insert_order(\"C1_FOSSIL_FUEL_ETF\", price=exchange.get_last_price_book(\"C1_GAS_INC\").asks[0].price - 0.1, volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)\n                \n        C1_s1_pre_b_price = C1_s1_pre_b_price + exchange.get_last_price_book(\"C1_GAS_INC\").bids[0].price\n        C1_s1_pre_s_price = C1_s1_pre_s_price + exchange.get_last_price_book(\"C1_GAS_INC\").asks[0].price\n                \n        if  positions_and_cash[case[2]][\"volume\"] < -volume_stock:\n            if exchange.get_last_price_book(\"C1_OIL_CORP\").bids[0].price < float(C1_s2_pre_b_price/iterator):\n                response: InsertOrderResponse = exchange.insert_order(\"C1_FOSSIL_FUEL_ETF\", price=exchange.get_last_price_book(\"C1_OIL_CORP\").bids[0].price + 0.1, volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_IOC)\n        elif  positions_and_cash[case[2]][\"volume\"] > volume_stock:\n            if exchange.get_last_price_book(\"C1_OIL_CORP\").asks[0].price > float(C1_s2_pre_s_price/iterator):\n                response: InsertOrderResponse = exchange.insert_order(\"C1_FOSSIL_FUEL_ETF\", price=exchange.get_last_price_book(\"C1_OIL_CORP\").asks[0].price - 0.1, volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)\n                \n        C1_s2_pre_b_price = C1_s2_pre_b_price + exchange.get_last_price_book(\"C1_OIL_CORP\").bids[0].price\n        C1_s1_pre_s_price = C1_s1_pre_s_price + exchange.get_last_price_book(\"C1_OIL_CORP\").asks[0].price\n        \n        if  positions_and_cash[case1[0]][\"volume\"] < -volume_basket:\n            if exchange.get_last_price_book(\"C2_GREEN_ENERGY_ETF\").bids[0].price < float(C2_b_pre_b_price/iterator):\n                response: InsertOrderResponse = exchange.insert_order(\"C2_GREEN_ENERGY_ETF\", price=exchange.get_last_price_book(\"C2_GREEN_ENERGY_ETF\").bids[0].price + 0.1, volume=volume_basket, side=SIDE_BID, order_type=ORDER_TYPE_IOC)\n        elif  positions_and_cash[case1[0]][\"volume\"] > volume_basket :\n            if exchange.get_last_price_book(\"C2_GREEN_ENERGY_ETF\").asks[0].price > float(C2_b_pre_s_price/iterator):\n                response: InsertOrderResponse = exchange.insert_order(\"C2_GREEN_ENERGY_ETF\", price=exchange.get_last_price_book(\"C2_GREEN_ENERGY_ETF\").asks[0].price - 0.1, volume=volume_basket, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)\n                \n        C2_b_pre_b_price = C2_b_pre_b_price + exchange.get_last_price_book(\"C2_GREEN_ENERGY_ETF\").bids[0].price\n        C2_b_pre_s_price = C2_b_pre_s_price + exchange.get_last_price_book(\"C2_GREEN_ENERGY_ETF\").asks[0].price\n        \n        if  positions_and_cash[case1[1]][\"volume\"] < -volume_stock:\n            if exchange.get_last_price_book(\"C2_SOLAR_CO\").bids[0].price < float(C2_s1_pre_b_price/iterator):\n                response: InsertOrderResponse = exchange.insert_order(\"C2_SOLAR_CO\", price=exchange.get_last_price_book(\"C2_SOLAR_CO\").bids[0].price + 0.1, volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_IOC)\n        elif  positions_and_cash[case1[1]][\"volume\"] > volume_stock:\n            if exchange.get_last_price_book(\"C2_SOLAR_CO\").asks[0].price > float(C2_s1_pre_s_price/iterator):\n                response: InsertOrderResponse = exchange.insert_order(\"C2_SOLAR_CO\", price=exchange.get_last_price_book(\"C2_SOLAR_CO\").asks[0].price - 0.1, volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)\n        \n        C2_s1_pre_b_price = C2_s1_pre_b_price + exchange.get_last_price_book(\"C2_SOLAR_CO\").bids[0].price\n        C2_s1_pre_s_price = C2_s1_pre_s_price + exchange.get_last_price_book(\"C2_SOLAR_CO\").asks[0].price\n                \n        if  positions_and_cash[case1[2]][\"volume\"] < -volume_stock:\n            if exchange.get_last_price_book(\"C2_WIND_LTD\").bids[0].price < float(C2_s2_pre_b_price/iterator):\n                response: InsertOrderResponse = exchange.insert_order(\"C2_WIND_LTD\", price=exchange.get_last_price_book(\"C2_WIND_LTD\").bids[0].price + 0.1, volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_IOC)\n        elif  positions_and_cash[case1[2]][\"volume\"] > volume_stock:\n            if exchange.get_last_price_book(\"C2_WIND_LTD\").asks[0].price > float(C2_s2_pre_s_price/iterator):\n                response: InsertOrderResponse = exchange.insert_order(\"C2_WIND_LTD\", price=exchange.get_last_price_book(\"C2_WIND_LTD\").asks[0].price - 0.1, volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)\n        \n        C2_s2_pre_b_price = C2_s2_pre_b_price + exchange.get_last_price_book(\"C2_WIND_LTD\").bids[0].price\n        C2_s2_pre_s_price = C2_s2_pre_s_price + exchange.get_last_price_book(\"C2_WIND_LTD\").asks[0].price\n        \n        \n        if result[0]==0:\n            print(exchange.get_pnl())\n            # # Keep position arount boundaries\n            # Worst case: About to exceed limits of negative basket -> Need to buy immediately\n            if positions_and_cash[case[0]][\"volume\"] - volume_basket <= -450:\n                response: InsertOrderResponse = exchange.insert_order(case[0], price=result[1]+0.2*result[7], volume=volume_basket, side=SIDE_BID, order_type=ORDER_TYPE_IOC)\n                # print_order_response(response)\n            # Worst case: About to exceed limits of positive stock1 -> Need to sell immediately\n            if positions_and_cash[case[1]][\"volume\"] + volume_stock >= 450:\n                response: InsertOrderResponse = exchange.insert_order(case[1], price=result[3], volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)\n                # print_order_response(response)\n            # Worst case: About to exceed limits of positive stock2 -> Need to sell immediately\n            if positions_and_cash[case[2]][\"volume\"] + volume_stock >= 450:\n                response: InsertOrderResponse = exchange.insert_order(case[2], price=result[5], volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)\n                # print_order_response(response)\n                \n            # Start buying stock and selling basket\n            response: InsertOrderResponse = exchange.insert_order(case[0], price=result[1]-0.2*result[7], volume=volume_basket, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)\n            b_pre_s_price = result[1]-0.2*result[7]\n            response: InsertOrderResponse = exchange.insert_order(case[1], price=result[3], volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_IOC)\n            s1_pre_b_price = result[3]\n            response: InsertOrderResponse = exchange.insert_order(case[2], price=result[5], volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_IOC)\n            s2_pre_b_price = result[5]\n            \n            \n            print(exchange.get_pnl())\n        else:\n            print(exchange.get_pnl())\n            \n            # Worst case: About to exceed limits of positive basket -> Need to sell immediately\n            if positions_and_cash[case[0]][\"volume\"] + volume_basket >= 450:\n                response: InsertOrderResponse = exchange.insert_order(case[0], price=result[1], volume=volume_basket, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)\n                print_order_response(response)\n            # Worst case: About to exceed limits of negative stock1 -> Need to buy immediately\n            if positions_and_cash[case[1]][\"volume\"] - volume_stock <= -450:\n                response: InsertOrderResponse = exchange.insert_order(case[1], price=result[3], volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_IOC)\n                print_order_response(response)\n            # Worst case: About to exceed limits of negative stock2 -> Need to buy immediately\n            if positions_and_cash[case[2]][\"volume\"] - volume_stock <= -450:\n                response: InsertOrderResponse = exchange.insert_order(case[2], price=result[5], volume=volume_stock, side=SIDE_BID, order_type=ORDER_TYPE_IOC)\n                print_order_response(response)\n                \n            # Start buying basket and selling stock\n            response: InsertOrderResponse = exchange.insert_order(case[0], price=result[1]+0.1, volume=volume_basket, side=SIDE_BID, order_type=ORDER_TYPE_IOC)\n            # print_order_response(response)\n            b_pre_b_price = result[1]-0.2*result[7]\n            response: InsertOrderResponse = exchange.insert_order(case[1], price=result[3], volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)\n            # print_order_response(response)\n            s1_pre_s_price = result[3]\n            response: InsertOrderResponse = exchange.insert_order(case[2], price=result[5], volume=volume_stock, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)\n            s2_pre_s_price = result[5]\n            \n            print(exchange.get_pnl())\n            \n        '''\n        for pos in positions_and_cash:\n            if positions_and_cash[pos][\"volume\"] > 280:\n                response: InsertOrderResponse = exchange.insert_order(pos, price=50, volume=15, side=SIDE_ASK, order_type=ORDER_TYPE_IOC)\n                print_order_response(response)\n            if positions_and_cash[pos][\"volume\"]< -280:\n                response: InsertOrderResponse = exchange.insert_order(pos, price=210, volume=15, side=SIDE_BID, order_type=ORDER_TYPE_IOC)\n                print_order_response(response)\n        '''\n        \n        time.sleep(1)\n        \n        \n    \n    print(exchange.get_positions_and_cash())\n    \n\nif __name__ == '__main__':\n    main()\n","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":0,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":95,"state":"start","mode":"ace/mode/python"}},"timestamp":1684028295322}