'''
EXAMPLE AUTO QUOTER

Do not edit this file directly. Instead, copy it somewhere else in your workspace.
These are simple bots that illustrate the Optibook API and some simple trading concepts. These bots will not make a profit.

This is an example bot that quotes the instrument C2_GREEN_ENERGY_ETF.
Quoting an instrument means sending both bids and asks at the same time and making these publicly visible in the order book,
so that other participants can trade with you. The logic of this bot is very simple. It looks at the current order book and tries to 
improve the price by 0.10 cents if possible. If the best bid is 90 and the best ask is 91, it will try to send a bid=90.10 and ask=90.90.
'''
import logging
import time
from typing import List
from optibook import common_types as t
from optibook import ORDER_TYPE_IOC, ORDER_TYPE_LIMIT, SIDE_ASK, SIDE_BID
from optibook.exchange_responses import InsertOrderResponse
from optibook.synchronous_client import Exchange
import random
import json

logging.getLogger('client').setLevel('ERROR')
logger = logging.getLogger(__name__)

BASKET_INSTRUMENT_IDS = ['C1_FOSSIL_FUEL_ETF', 'C2_GREEN_ENERGY_ETF']
STOCK_INSTRUMENT_IDS = ['C1_GAS_INC', 'C1_OIL_CORP', 'C2_SOLAR_CO', 'C2_WIND_LTD']
BASKET1 = 'C1_FOSSIL_FUEL_ETF'
BASKET2 = 'C2_GREEN_ENERGY_ETF'
STOCK1 = ['C1_GAS_INC', 'C1_OIL_CORP']
STOCK2 = ['C2_SOLAR_CO', 'C2_WIND_LTD']
def closeAllPosition(e, debug=False):
    '''
    Iterates and attempts to close all open positions
    
    Parameters
    -----------
    debug : Bool
        If true, we print our current positions before and after attempting
        to close
    '''
    if(debug):
        print("Starting Positions: ")
        print(e.get_positions())
    for s, p in e.get_positions().items():
        if p > 0:
            e.insert_order(s, price=1, volume=p, side='ask', order_type='ioc')
        elif p < 0:
            e.insert_order(s, price=100000, volume=-p, side='bid', order_type='ioc')  
    if(debug):
        print("End Positions: ")
        print(e.get_positions())

def print_order_response(order_response: InsertOrderResponse):
    if order_response.success:
        logger.info(f"Inserted order successfully, order_id='{order_response.order_id}'")
    else:
        logger.info(f"Unable to insert order with reason: '{order_response.success}'")

def buyBasket(e:Exchange,b_id,s1_id,s2_id):
    b = e.get_last_price_book(b_id)
    s1 = e.get_last_price_book(s1_id)
    s2 = e.get_last_price_book(s2_id)
    bPrice = b.bids[0].price
    bVolume = b.bids[0].volume
    s1Price = s1.bids[0].price
    s1Volume = s1.bids[0].volume
    s2Price = s2.bids[0].price
    s2Volume = s2.bids[0].volume
    
    print(b,s1,s2)


def main():
    e = Exchange()
    e.connect()
    # closeAllPosition(exchange)
    print(e.get_positions_and_cash())
    buyBasket(e,BASKET1,STOCK1[0],STOCK1[1])

    
    
        
    
    print(e.get_positions_and_cash())
    

if __name__ == '__main__':
    main()
